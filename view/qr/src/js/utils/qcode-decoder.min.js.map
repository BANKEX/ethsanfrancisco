{"version":3,"sources":["qrcode.js","qcode-decoder.js"],"names":[],"mappings":"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A,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,EAAA,GAAA,OAAA,EAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,EAAA,GAAA,OAAA,EAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,EAAA,GAAA,OAAA,EAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,EAAA,GAAA,OAAA,EAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,IAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,IAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,IAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,MACA,GAA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","file":"qcode-decoder.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd)\n    define([], factory);\n  else if (typeof exports === 'object')\n    module.exports = factory();\n  else root.qrcode = factory();\n}(this, function () {\n/*\n  Ported to JavaScript by Lazar Laszlo 2011\n\n  lazarsoft@gmail.com, www.lazarsoft.info\n\n*/\n\n/*\n*\n* Copyright 2007 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n\nGridSampler = {};\n\nGridSampler.checkAndNudgePoints=function( image,  points)\n\t\t{\n\t\t\tvar width = qrcode.width;\n\t\t\tvar height = qrcode.height;\n\t\t\t// Check and nudge points from start until we see some that are OK:\n\t\t\tvar nudged = true;\n\t\t\tfor (var offset = 0; offset < points.length && nudged; offset += 2)\n\t\t\t{\n\t\t\t\tvar x = Math.floor (points[offset]);\n\t\t\t\tvar y = Math.floor( points[offset + 1]);\n\t\t\t\tif (x < - 1 || x > width || y < - 1 || y > height)\n\t\t\t\t{\n\t\t\t\t\tthrow \"Error.checkAndNudgePoints \";\n\t\t\t\t}\n\t\t\t\tnudged = false;\n\t\t\t\tif (x == - 1)\n\t\t\t\t{\n\t\t\t\t\tpoints[offset] = 0.0;\n\t\t\t\t\tnudged = true;\n\t\t\t\t}\n\t\t\t\telse if (x == width)\n\t\t\t\t{\n\t\t\t\t\tpoints[offset] = width - 1;\n\t\t\t\t\tnudged = true;\n\t\t\t\t}\n\t\t\t\tif (y == - 1)\n\t\t\t\t{\n\t\t\t\t\tpoints[offset + 1] = 0.0;\n\t\t\t\t\tnudged = true;\n\t\t\t\t}\n\t\t\t\telse if (y == height)\n\t\t\t\t{\n\t\t\t\t\tpoints[offset + 1] = height - 1;\n\t\t\t\t\tnudged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check and nudge points from end:\n\t\t\tnudged = true;\n\t\t\tfor (var offset = points.length - 2; offset >= 0 && nudged; offset -= 2)\n\t\t\t{\n\t\t\t\tvar x = Math.floor( points[offset]);\n\t\t\t\tvar y = Math.floor( points[offset + 1]);\n\t\t\t\tif (x < - 1 || x > width || y < - 1 || y > height)\n\t\t\t\t{\n\t\t\t\t\tthrow \"Error.checkAndNudgePoints \";\n\t\t\t\t}\n\t\t\t\tnudged = false;\n\t\t\t\tif (x == - 1)\n\t\t\t\t{\n\t\t\t\t\tpoints[offset] = 0.0;\n\t\t\t\t\tnudged = true;\n\t\t\t\t}\n\t\t\t\telse if (x == width)\n\t\t\t\t{\n\t\t\t\t\tpoints[offset] = width - 1;\n\t\t\t\t\tnudged = true;\n\t\t\t\t}\n\t\t\t\tif (y == - 1)\n\t\t\t\t{\n\t\t\t\t\tpoints[offset + 1] = 0.0;\n\t\t\t\t\tnudged = true;\n\t\t\t\t}\n\t\t\t\telse if (y == height)\n\t\t\t\t{\n\t\t\t\t\tpoints[offset + 1] = height - 1;\n\t\t\t\t\tnudged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\nGridSampler.sampleGrid3=function( image,  dimension,  transform)\n\t\t{\n\t\t\tvar bits = new BitMatrix(dimension);\n\t\t\tvar points = new Array(dimension << 1);\n\t\t\tfor (var y = 0; y < dimension; y++)\n\t\t\t{\n\t\t\t\tvar max = points.length;\n\t\t\t\tvar iValue =  y + 0.5;\n\t\t\t\tfor (var x = 0; x < max; x += 2)\n\t\t\t\t{\n\t\t\t\t\tpoints[x] =  (x >> 1) + 0.5;\n\t\t\t\t\tpoints[x + 1] = iValue;\n\t\t\t\t}\n\t\t\t\ttransform.transformPoints1(points);\n\t\t\t\t// Quick check to see if points transformed to something inside the image;\n\t\t\t\t// sufficient to check the endpoints\n\t\t\t\tGridSampler.checkAndNudgePoints(image, points);\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfor (var x = 0; x < max; x += 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar xpoint = (Math.floor( points[x]) * 4) + (Math.floor( points[x + 1]) * qrcode.width * 4);\n                        var bit = image[Math.floor( points[x])+ qrcode.width* Math.floor( points[x + 1])];\n\t\t\t\t\t\tqrcode.imagedata.data[xpoint] = bit?255:0;\n\t\t\t\t\t\tqrcode.imagedata.data[xpoint+1] = bit?255:0;\n\t\t\t\t\t\tqrcode.imagedata.data[xpoint+2] = 0;\n\t\t\t\t\t\tqrcode.imagedata.data[xpoint+3] = 255;\n\t\t\t\t\t\t//bits[x >> 1][ y]=bit;\n\t\t\t\t\t\tif(bit)\n\t\t\t\t\t\t\tbits.set_Renamed(x >> 1, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch ( aioobe)\n\t\t\t\t{\n\t\t\t\t\t// This feels wrong, but, sometimes if the finder patterns are misidentified, the resulting\n\t\t\t\t\t// transform gets \"twisted\" such that it maps a straight line of points to a set of points\n\t\t\t\t\t// whose endpoints are in bounds, but others are not. There is probably some mathematical\n\t\t\t\t\t// way to detect this about the transformation that I don't know yet.\n\t\t\t\t\t// This results in an ugly runtime exception despite our clever checks above -- can't have\n\t\t\t\t\t// that. We could check each point's coordinates but that feels duplicative. We settle for\n\t\t\t\t\t// catching and wrapping ArrayIndexOutOfBoundsException.\n\t\t\t\t\tthrow \"Error.checkAndNudgePoints\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn bits;\n\t\t}\n\nGridSampler.sampleGridx=function( image,  dimension,  p1ToX,  p1ToY,  p2ToX,  p2ToY,  p3ToX,  p3ToY,  p4ToX,  p4ToY,  p1FromX,  p1FromY,  p2FromX,  p2FromY,  p3FromX,  p3FromY,  p4FromX,  p4FromY)\n{\n\tvar transform = PerspectiveTransform.quadrilateralToQuadrilateral(p1ToX, p1ToY, p2ToX, p2ToY, p3ToX, p3ToY, p4ToX, p4ToY, p1FromX, p1FromY, p2FromX, p2FromY, p3FromX, p3FromY, p4FromX, p4FromY);\n\n\treturn GridSampler.sampleGrid3(image, dimension, transform);\n}\n\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\n\r\nfunction ECB(count,  dataCodewords)\r\n{\r\n\tthis.count = count;\r\n\tthis.dataCodewords = dataCodewords;\r\n\t\r\n\tthis.__defineGetter__(\"Count\", function()\r\n\t{\r\n\t\treturn this.count;\r\n\t});\r\n\tthis.__defineGetter__(\"DataCodewords\", function()\r\n\t{\r\n\t\treturn this.dataCodewords;\r\n\t});\r\n}\r\n\r\nfunction ECBlocks( ecCodewordsPerBlock,  ecBlocks1,  ecBlocks2)\r\n{\r\n\tthis.ecCodewordsPerBlock = ecCodewordsPerBlock;\r\n\tif(ecBlocks2)\r\n\t\tthis.ecBlocks = new Array(ecBlocks1, ecBlocks2);\r\n\telse\r\n\t\tthis.ecBlocks = new Array(ecBlocks1);\r\n\t\r\n\tthis.__defineGetter__(\"ECCodewordsPerBlock\", function()\r\n\t{\r\n\t\treturn this.ecCodewordsPerBlock;\r\n\t});\r\n\t\r\n\tthis.__defineGetter__(\"TotalECCodewords\", function()\r\n\t{\r\n\t\treturn  this.ecCodewordsPerBlock * this.NumBlocks;\r\n\t});\r\n\t\r\n\tthis.__defineGetter__(\"NumBlocks\", function()\r\n\t{\r\n\t\tvar total = 0;\r\n\t\tfor (var i = 0; i < this.ecBlocks.length; i++)\r\n\t\t{\r\n\t\t\ttotal += this.ecBlocks[i].length;\r\n\t\t}\r\n\t\treturn total;\r\n\t});\r\n\t\r\n\tthis.getECBlocks=function()\r\n\t\t\t{\r\n\t\t\t\treturn this.ecBlocks;\r\n\t\t\t}\r\n}\r\n\r\nfunction Version( versionNumber,  alignmentPatternCenters,  ecBlocks1,  ecBlocks2,  ecBlocks3,  ecBlocks4)\r\n{\r\n\tthis.versionNumber = versionNumber;\r\n\tthis.alignmentPatternCenters = alignmentPatternCenters;\r\n\tthis.ecBlocks = new Array(ecBlocks1, ecBlocks2, ecBlocks3, ecBlocks4);\r\n\t\r\n\tvar total = 0;\r\n\tvar ecCodewords = ecBlocks1.ECCodewordsPerBlock;\r\n\tvar ecbArray = ecBlocks1.getECBlocks();\r\n\tfor (var i = 0; i < ecbArray.length; i++)\r\n\t{\r\n\t\tvar ecBlock = ecbArray[i];\r\n\t\ttotal += ecBlock.Count * (ecBlock.DataCodewords + ecCodewords);\r\n\t}\r\n\tthis.totalCodewords = total;\r\n\t\r\n\tthis.__defineGetter__(\"VersionNumber\", function()\r\n\t{\r\n\t\treturn  this.versionNumber;\r\n\t});\r\n\t\r\n\tthis.__defineGetter__(\"AlignmentPatternCenters\", function()\r\n\t{\r\n\t\treturn  this.alignmentPatternCenters;\r\n\t});\r\n\tthis.__defineGetter__(\"TotalCodewords\", function()\r\n\t{\r\n\t\treturn  this.totalCodewords;\r\n\t});\r\n\tthis.__defineGetter__(\"DimensionForVersion\", function()\r\n\t{\r\n\t\treturn  17 + 4 * this.versionNumber;\r\n\t});\r\n\t\r\n\tthis.buildFunctionPattern=function()\r\n\t\t{\r\n\t\t\tvar dimension = this.DimensionForVersion;\r\n\t\t\tvar bitMatrix = new BitMatrix(dimension);\r\n\t\t\t\r\n\t\t\t// Top left finder pattern + separator + format\r\n\t\t\tbitMatrix.setRegion(0, 0, 9, 9);\r\n\t\t\t// Top right finder pattern + separator + format\r\n\t\t\tbitMatrix.setRegion(dimension - 8, 0, 8, 9);\r\n\t\t\t// Bottom left finder pattern + separator + format\r\n\t\t\tbitMatrix.setRegion(0, dimension - 8, 9, 8);\r\n\t\t\t\r\n\t\t\t// Alignment patterns\r\n\t\t\tvar max = this.alignmentPatternCenters.length;\r\n\t\t\tfor (var x = 0; x < max; x++)\r\n\t\t\t{\r\n\t\t\t\tvar i = this.alignmentPatternCenters[x] - 2;\r\n\t\t\t\tfor (var y = 0; y < max; y++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// No alignment patterns near the three finder paterns\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbitMatrix.setRegion(this.alignmentPatternCenters[y] - 2, i, 5, 5);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Vertical timing pattern\r\n\t\t\tbitMatrix.setRegion(6, 9, 1, dimension - 17);\r\n\t\t\t// Horizontal timing pattern\r\n\t\t\tbitMatrix.setRegion(9, 6, dimension - 17, 1);\r\n\t\t\t\r\n\t\t\tif (this.versionNumber > 6)\r\n\t\t\t{\r\n\t\t\t\t// Version info, top right\r\n\t\t\t\tbitMatrix.setRegion(dimension - 11, 0, 3, 6);\r\n\t\t\t\t// Version info, bottom left\r\n\t\t\t\tbitMatrix.setRegion(0, dimension - 11, 6, 3);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn bitMatrix;\r\n\t\t}\r\n\tthis.getECBlocksForLevel=function( ecLevel)\r\n\t{\r\n\t\treturn this.ecBlocks[ecLevel.ordinal()];\r\n\t}\r\n}\r\n\r\nVersion.VERSION_DECODE_INFO = new Array(0x07C94, 0x085BC, 0x09A99, 0x0A4D3, 0x0BBF6, 0x0C762, 0x0D847, 0x0E60D, 0x0F928, 0x10B78, 0x1145D, 0x12A17, 0x13532, 0x149A6, 0x15683, 0x168C9, 0x177EC, 0x18EC4, 0x191E1, 0x1AFAB, 0x1B08E, 0x1CC1A, 0x1D33F, 0x1ED75, 0x1F250, 0x209D5, 0x216F0, 0x228BA, 0x2379F, 0x24B0B, 0x2542E, 0x26A64, 0x27541, 0x28C69);\r\n\r\nVersion.VERSIONS = buildVersions();\r\n\r\nVersion.getVersionForNumber=function( versionNumber)\r\n{\r\n\tif (versionNumber < 1 || versionNumber > 40)\r\n\t{\r\n\t\tthrow \"ArgumentException\";\r\n\t}\r\n\treturn Version.VERSIONS[versionNumber - 1];\r\n}\r\n\r\nVersion.getProvisionalVersionForDimension=function(dimension)\r\n{\r\n\tif (dimension % 4 != 1)\r\n\t{\r\n\t\tthrow \"Error getProvisionalVersionForDimension\";\r\n\t}\r\n\ttry\r\n\t{\r\n\t\treturn Version.getVersionForNumber((dimension - 17) >> 2);\r\n\t}\r\n\tcatch ( iae)\r\n\t{\r\n\t\tthrow \"Error getVersionForNumber\";\r\n\t}\r\n}\r\n\r\nVersion.decodeVersionInformation=function( versionBits)\r\n{\r\n\tvar bestDifference = 0xffffffff;\r\n\tvar bestVersion = 0;\r\n\tfor (var i = 0; i < Version.VERSION_DECODE_INFO.length; i++)\r\n\t{\r\n\t\tvar targetVersion = Version.VERSION_DECODE_INFO[i];\r\n\t\t// Do the version info bits match exactly? done.\r\n\t\tif (targetVersion == versionBits)\r\n\t\t{\r\n\t\t\treturn this.getVersionForNumber(i + 7);\r\n\t\t}\r\n\t\t// Otherwise see if this is the closest to a real version info bit string\r\n\t\t// we have seen so far\r\n\t\tvar bitsDifference = FormatInformation.numBitsDiffering(versionBits, targetVersion);\r\n\t\tif (bitsDifference < bestDifference)\r\n\t\t{\r\n\t\t\tbestVersion = i + 7;\r\n\t\t\tbestDifference = bitsDifference;\r\n\t\t}\r\n\t}\r\n\t// We can tolerate up to 3 bits of error since no two version info codewords will\r\n\t// differ in less than 4 bits.\r\n\tif (bestDifference <= 3)\r\n\t{\r\n\t\treturn this.getVersionForNumber(bestVersion);\r\n\t}\r\n\t// If we didn't find a close enough match, fail\r\n\treturn null;\r\n}\r\n\r\nfunction buildVersions()\r\n{\r\n\treturn new Array(new Version(1, new Array(), new ECBlocks(7, new ECB(1, 19)), new ECBlocks(10, new ECB(1, 16)), new ECBlocks(13, new ECB(1, 13)), new ECBlocks(17, new ECB(1, 9))), \r\n\tnew Version(2, new Array(6, 18), new ECBlocks(10, new ECB(1, 34)), new ECBlocks(16, new ECB(1, 28)), new ECBlocks(22, new ECB(1, 22)), new ECBlocks(28, new ECB(1, 16))), \r\n\tnew Version(3, new Array(6, 22), new ECBlocks(15, new ECB(1, 55)), new ECBlocks(26, new ECB(1, 44)), new ECBlocks(18, new ECB(2, 17)), new ECBlocks(22, new ECB(2, 13))), \r\n\tnew Version(4, new Array(6, 26), new ECBlocks(20, new ECB(1, 80)), new ECBlocks(18, new ECB(2, 32)), new ECBlocks(26, new ECB(2, 24)), new ECBlocks(16, new ECB(4, 9))), \r\n\tnew Version(5, new Array(6, 30), new ECBlocks(26, new ECB(1, 108)), new ECBlocks(24, new ECB(2, 43)), new ECBlocks(18, new ECB(2, 15), new ECB(2, 16)), new ECBlocks(22, new ECB(2, 11), new ECB(2, 12))), \r\n\tnew Version(6, new Array(6, 34), new ECBlocks(18, new ECB(2, 68)), new ECBlocks(16, new ECB(4, 27)), new ECBlocks(24, new ECB(4, 19)), new ECBlocks(28, new ECB(4, 15))), \r\n\tnew Version(7, new Array(6, 22, 38), new ECBlocks(20, new ECB(2, 78)), new ECBlocks(18, new ECB(4, 31)), new ECBlocks(18, new ECB(2, 14), new ECB(4, 15)), new ECBlocks(26, new ECB(4, 13), new ECB(1, 14))), \r\n\tnew Version(8, new Array(6, 24, 42), new ECBlocks(24, new ECB(2, 97)), new ECBlocks(22, new ECB(2, 38), new ECB(2, 39)), new ECBlocks(22, new ECB(4, 18), new ECB(2, 19)), new ECBlocks(26, new ECB(4, 14), new ECB(2, 15))), \r\n\tnew Version(9, new Array(6, 26, 46), new ECBlocks(30, new ECB(2, 116)), new ECBlocks(22, new ECB(3, 36), new ECB(2, 37)), new ECBlocks(20, new ECB(4, 16), new ECB(4, 17)), new ECBlocks(24, new ECB(4, 12), new ECB(4, 13))), \r\n\tnew Version(10, new Array(6, 28, 50), new ECBlocks(18, new ECB(2, 68), new ECB(2, 69)), new ECBlocks(26, new ECB(4, 43), new ECB(1, 44)), new ECBlocks(24, new ECB(6, 19), new ECB(2, 20)), new ECBlocks(28, new ECB(6, 15), new ECB(2, 16))), \r\n\tnew Version(11, new Array(6, 30, 54), new ECBlocks(20, new ECB(4, 81)), new ECBlocks(30, new ECB(1, 50), new ECB(4, 51)), new ECBlocks(28, new ECB(4, 22), new ECB(4, 23)), new ECBlocks(24, new ECB(3, 12), new ECB(8, 13))), \r\n\tnew Version(12, new Array(6, 32, 58), new ECBlocks(24, new ECB(2, 92), new ECB(2, 93)), new ECBlocks(22, new ECB(6, 36), new ECB(2, 37)), new ECBlocks(26, new ECB(4, 20), new ECB(6, 21)), new ECBlocks(28, new ECB(7, 14), new ECB(4, 15))), \r\n\tnew Version(13, new Array(6, 34, 62), new ECBlocks(26, new ECB(4, 107)), new ECBlocks(22, new ECB(8, 37), new ECB(1, 38)), new ECBlocks(24, new ECB(8, 20), new ECB(4, 21)), new ECBlocks(22, new ECB(12, 11), new ECB(4, 12))), \r\n\tnew Version(14, new Array(6, 26, 46, 66), new ECBlocks(30, new ECB(3, 115), new ECB(1, 116)), new ECBlocks(24, new ECB(4, 40), new ECB(5, 41)), new ECBlocks(20, new ECB(11, 16), new ECB(5, 17)), new ECBlocks(24, new ECB(11, 12), new ECB(5, 13))), \r\n\tnew Version(15, new Array(6, 26, 48, 70), new ECBlocks(22, new ECB(5, 87), new ECB(1, 88)), new ECBlocks(24, new ECB(5, 41), new ECB(5, 42)), new ECBlocks(30, new ECB(5, 24), new ECB(7, 25)), new ECBlocks(24, new ECB(11, 12), new ECB(7, 13))), \r\n\tnew Version(16, new Array(6, 26, 50, 74), new ECBlocks(24, new ECB(5, 98), new ECB(1, 99)), new ECBlocks(28, new ECB(7, 45), new ECB(3, 46)), new ECBlocks(24, new ECB(15, 19), new ECB(2, 20)), new ECBlocks(30, new ECB(3, 15), new ECB(13, 16))), \r\n\tnew Version(17, new Array(6, 30, 54, 78), new ECBlocks(28, new ECB(1, 107), new ECB(5, 108)), new ECBlocks(28, new ECB(10, 46), new ECB(1, 47)), new ECBlocks(28, new ECB(1, 22), new ECB(15, 23)), new ECBlocks(28, new ECB(2, 14), new ECB(17, 15))), \r\n\tnew Version(18, new Array(6, 30, 56, 82), new ECBlocks(30, new ECB(5, 120), new ECB(1, 121)), new ECBlocks(26, new ECB(9, 43), new ECB(4, 44)), new ECBlocks(28, new ECB(17, 22), new ECB(1, 23)), new ECBlocks(28, new ECB(2, 14), new ECB(19, 15))), \r\n\tnew Version(19, new Array(6, 30, 58, 86), new ECBlocks(28, new ECB(3, 113), new ECB(4, 114)), new ECBlocks(26, new ECB(3, 44), new ECB(11, 45)), new ECBlocks(26, new ECB(17, 21), new ECB(4, 22)), new ECBlocks(26, new ECB(9, 13), new ECB(16, 14))), \r\n\tnew Version(20, new Array(6, 34, 62, 90), new ECBlocks(28, new ECB(3, 107), new ECB(5, 108)), new ECBlocks(26, new ECB(3, 41), new ECB(13, 42)), new ECBlocks(30, new ECB(15, 24), new ECB(5, 25)), new ECBlocks(28, new ECB(15, 15), new ECB(10, 16))), \r\n\tnew Version(21, new Array(6, 28, 50, 72, 94), new ECBlocks(28, new ECB(4, 116), new ECB(4, 117)), new ECBlocks(26, new ECB(17, 42)), new ECBlocks(28, new ECB(17, 22), new ECB(6, 23)), new ECBlocks(30, new ECB(19, 16), new ECB(6, 17))), \r\n\tnew Version(22, new Array(6, 26, 50, 74, 98), new ECBlocks(28, new ECB(2, 111), new ECB(7, 112)), new ECBlocks(28, new ECB(17, 46)), new ECBlocks(30, new ECB(7, 24), new ECB(16, 25)), new ECBlocks(24, new ECB(34, 13))), \r\n\tnew Version(23, new Array(6, 30, 54, 74, 102), new ECBlocks(30, new ECB(4, 121), new ECB(5, 122)), new ECBlocks(28, new ECB(4, 47), new ECB(14, 48)), new ECBlocks(30, new ECB(11, 24), new ECB(14, 25)), new ECBlocks(30, new ECB(16, 15), new ECB(14, 16))), \r\n\tnew Version(24, new Array(6, 28, 54, 80, 106), new ECBlocks(30, new ECB(6, 117), new ECB(4, 118)), new ECBlocks(28, new ECB(6, 45), new ECB(14, 46)), new ECBlocks(30, new ECB(11, 24), new ECB(16, 25)), new ECBlocks(30, new ECB(30, 16), new ECB(2, 17))), \r\n\tnew Version(25, new Array(6, 32, 58, 84, 110), new ECBlocks(26, new ECB(8, 106), new ECB(4, 107)), new ECBlocks(28, new ECB(8, 47), new ECB(13, 48)), new ECBlocks(30, new ECB(7, 24), new ECB(22, 25)), new ECBlocks(30, new ECB(22, 15), new ECB(13, 16))), \r\n\tnew Version(26, new Array(6, 30, 58, 86, 114), new ECBlocks(28, new ECB(10, 114), new ECB(2, 115)), new ECBlocks(28, new ECB(19, 46), new ECB(4, 47)), new ECBlocks(28, new ECB(28, 22), new ECB(6, 23)), new ECBlocks(30, new ECB(33, 16), new ECB(4, 17))), \r\n\tnew Version(27, new Array(6, 34, 62, 90, 118), new ECBlocks(30, new ECB(8, 122), new ECB(4, 123)), new ECBlocks(28, new ECB(22, 45), new ECB(3, 46)), new ECBlocks(30, new ECB(8, 23), new ECB(26, 24)), new ECBlocks(30, new ECB(12, 15), \t\tnew ECB(28, 16))),\r\n\tnew Version(28, new Array(6, 26, 50, 74, 98, 122), new ECBlocks(30, new ECB(3, 117), new ECB(10, 118)), new ECBlocks(28, new ECB(3, 45), new ECB(23, 46)), new ECBlocks(30, new ECB(4, 24), new ECB(31, 25)), new ECBlocks(30, new ECB(11, 15), new ECB(31, 16))), \r\n\tnew Version(29, new Array(6, 30, 54, 78, 102, 126), new ECBlocks(30, new ECB(7, 116), new ECB(7, 117)), new ECBlocks(28, new ECB(21, 45), new ECB(7, 46)), new ECBlocks(30, new ECB(1, 23), new ECB(37, 24)), new ECBlocks(30, new ECB(19, 15), new ECB(26, 16))), \r\n\tnew Version(30, new Array(6, 26, 52, 78, 104, 130), new ECBlocks(30, new ECB(5, 115), new ECB(10, 116)), new ECBlocks(28, new ECB(19, 47), new ECB(10, 48)), new ECBlocks(30, new ECB(15, 24), new ECB(25, 25)), new ECBlocks(30, new ECB(23, 15), new ECB(25, 16))), \r\n\tnew Version(31, new Array(6, 30, 56, 82, 108, 134), new ECBlocks(30, new ECB(13, 115), new ECB(3, 116)), new ECBlocks(28, new ECB(2, 46), new ECB(29, 47)), new ECBlocks(30, new ECB(42, 24), new ECB(1, 25)), new ECBlocks(30, new ECB(23, 15), new ECB(28, 16))), \r\n\tnew Version(32, new Array(6, 34, 60, 86, 112, 138), new ECBlocks(30, new ECB(17, 115)), new ECBlocks(28, new ECB(10, 46), new ECB(23, 47)), new ECBlocks(30, new ECB(10, 24), new ECB(35, 25)), new ECBlocks(30, new ECB(19, 15), new ECB(35, 16))), \r\n\tnew Version(33, new Array(6, 30, 58, 86, 114, 142), new ECBlocks(30, new ECB(17, 115), new ECB(1, 116)), new ECBlocks(28, new ECB(14, 46), new ECB(21, 47)), new ECBlocks(30, new ECB(29, 24), new ECB(19, 25)), new ECBlocks(30, new ECB(11, 15), new ECB(46, 16))), \r\n\tnew Version(34, new Array(6, 34, 62, 90, 118, 146), new ECBlocks(30, new ECB(13, 115), new ECB(6, 116)), new ECBlocks(28, new ECB(14, 46), new ECB(23, 47)), new ECBlocks(30, new ECB(44, 24), new ECB(7, 25)), new ECBlocks(30, new ECB(59, 16), new ECB(1, 17))), \r\n\tnew Version(35, new Array(6, 30, 54, 78, 102, 126, 150), new ECBlocks(30, new ECB(12, 121), new ECB(7, 122)), new ECBlocks(28, new ECB(12, 47), new ECB(26, 48)), new ECBlocks(30, new ECB(39, 24), new ECB(14, 25)),new ECBlocks(30, new ECB(22, 15), new ECB(41, 16))), \r\n\tnew Version(36, new Array(6, 24, 50, 76, 102, 128, 154), new ECBlocks(30, new ECB(6, 121), new ECB(14, 122)), new ECBlocks(28, new ECB(6, 47), new ECB(34, 48)), new ECBlocks(30, new ECB(46, 24), new ECB(10, 25)), new ECBlocks(30, new ECB(2, 15), new ECB(64, 16))), \r\n\tnew Version(37, new Array(6, 28, 54, 80, 106, 132, 158), new ECBlocks(30, new ECB(17, 122), new ECB(4, 123)), new ECBlocks(28, new ECB(29, 46), new ECB(14, 47)), new ECBlocks(30, new ECB(49, 24), new ECB(10, 25)), new ECBlocks(30, new ECB(24, 15), new ECB(46, 16))), \r\n\tnew Version(38, new Array(6, 32, 58, 84, 110, 136, 162), new ECBlocks(30, new ECB(4, 122), new ECB(18, 123)), new ECBlocks(28, new ECB(13, 46), new ECB(32, 47)), new ECBlocks(30, new ECB(48, 24), new ECB(14, 25)), new ECBlocks(30, new ECB(42, 15), new ECB(32, 16))), \r\n\tnew Version(39, new Array(6, 26, 54, 82, 110, 138, 166), new ECBlocks(30, new ECB(20, 117), new ECB(4, 118)), new ECBlocks(28, new ECB(40, 47), new ECB(7, 48)), new ECBlocks(30, new ECB(43, 24), new ECB(22, 25)), new ECBlocks(30, new ECB(10, 15), new ECB(67, 16))), \r\n\tnew Version(40, new Array(6, 30, 58, 86, 114, 142, 170), new ECBlocks(30, new ECB(19, 118), new ECB(6, 119)), new ECBlocks(28, new ECB(18, 47), new ECB(31, 48)), new ECBlocks(30, new ECB(34, 24), new ECB(34, 25)), new ECBlocks(30, new ECB(20, 15), new ECB(61, 16))));\r\n}\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction PerspectiveTransform( a11,  a21,  a31,  a12,  a22,  a32,  a13,  a23,  a33)\r\n{\r\n\tthis.a11 = a11;\r\n\tthis.a12 = a12;\r\n\tthis.a13 = a13;\r\n\tthis.a21 = a21;\r\n\tthis.a22 = a22;\r\n\tthis.a23 = a23;\r\n\tthis.a31 = a31;\r\n\tthis.a32 = a32;\r\n\tthis.a33 = a33;\r\n\tthis.transformPoints1=function( points)\r\n\t\t{\r\n\t\t\tvar max = points.length;\r\n\t\t\tvar a11 = this.a11;\r\n\t\t\tvar a12 = this.a12;\r\n\t\t\tvar a13 = this.a13;\r\n\t\t\tvar a21 = this.a21;\r\n\t\t\tvar a22 = this.a22;\r\n\t\t\tvar a23 = this.a23;\r\n\t\t\tvar a31 = this.a31;\r\n\t\t\tvar a32 = this.a32;\r\n\t\t\tvar a33 = this.a33;\r\n\t\t\tfor (var i = 0; i < max; i += 2)\r\n\t\t\t{\r\n\t\t\t\tvar x = points[i];\r\n\t\t\t\tvar y = points[i + 1];\r\n\t\t\t\tvar denominator = a13 * x + a23 * y + a33;\r\n\t\t\t\tpoints[i] = (a11 * x + a21 * y + a31) / denominator;\r\n\t\t\t\tpoints[i + 1] = (a12 * x + a22 * y + a32) / denominator;\r\n\t\t\t}\r\n\t\t}\r\n\tthis. transformPoints2=function(xValues, yValues)\r\n\t\t{\r\n\t\t\tvar n = xValues.length;\r\n\t\t\tfor (var i = 0; i < n; i++)\r\n\t\t\t{\r\n\t\t\t\tvar x = xValues[i];\r\n\t\t\t\tvar y = yValues[i];\r\n\t\t\t\tvar denominator = this.a13 * x + this.a23 * y + this.a33;\r\n\t\t\t\txValues[i] = (this.a11 * x + this.a21 * y + this.a31) / denominator;\r\n\t\t\t\tyValues[i] = (this.a12 * x + this.a22 * y + this.a32) / denominator;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tthis.buildAdjoint=function()\r\n\t\t{\r\n\t\t\t// Adjoint is the transpose of the cofactor matrix:\r\n\t\t\treturn new PerspectiveTransform(this.a22 * this.a33 - this.a23 * this.a32, this.a23 * this.a31 - this.a21 * this.a33, this.a21 * this.a32 - this.a22 * this.a31, this.a13 * this.a32 - this.a12 * this.a33, this.a11 * this.a33 - this.a13 * this.a31, this.a12 * this.a31 - this.a11 * this.a32, this.a12 * this.a23 - this.a13 * this.a22, this.a13 * this.a21 - this.a11 * this.a23, this.a11 * this.a22 - this.a12 * this.a21);\r\n\t\t}\r\n\tthis.times=function( other)\r\n\t\t{\r\n\t\t\treturn new PerspectiveTransform(this.a11 * other.a11 + this.a21 * other.a12 + this.a31 * other.a13, this.a11 * other.a21 + this.a21 * other.a22 + this.a31 * other.a23, this.a11 * other.a31 + this.a21 * other.a32 + this.a31 * other.a33, this.a12 * other.a11 + this.a22 * other.a12 + this.a32 * other.a13, this.a12 * other.a21 + this.a22 * other.a22 + this.a32 * other.a23, this.a12 * other.a31 + this.a22 * other.a32 + this.a32 * other.a33, this.a13 * other.a11 + this.a23 * other.a12 +this.a33 * other.a13, this.a13 * other.a21 + this.a23 * other.a22 + this.a33 * other.a23, this.a13 * other.a31 + this.a23 * other.a32 + this.a33 * other.a33);\r\n\t\t}\r\n\r\n}\r\n\r\nPerspectiveTransform.quadrilateralToQuadrilateral=function( x0,  y0,  x1,  y1,  x2,  y2,  x3,  y3,  x0p,  y0p,  x1p,  y1p,  x2p,  y2p,  x3p,  y3p)\r\n{\r\n\t\r\n\tvar qToS = this.quadrilateralToSquare(x0, y0, x1, y1, x2, y2, x3, y3);\r\n\tvar sToQ = this.squareToQuadrilateral(x0p, y0p, x1p, y1p, x2p, y2p, x3p, y3p);\r\n\treturn sToQ.times(qToS);\r\n}\r\n\r\nPerspectiveTransform.squareToQuadrilateral=function( x0,  y0,  x1,  y1,  x2,  y2,  x3,  y3)\r\n{\r\n\t dy2 = y3 - y2;\r\n\t dy3 = y0 - y1 + y2 - y3;\r\n\tif (dy2 == 0.0 && dy3 == 0.0)\r\n\t{\r\n\t\treturn new PerspectiveTransform(x1 - x0, x2 - x1, x0, y1 - y0, y2 - y1, y0, 0.0, 0.0, 1.0);\r\n\t}\r\n\telse\r\n\t{\r\n\t\t dx1 = x1 - x2;\r\n\t\t dx2 = x3 - x2;\r\n\t\t dx3 = x0 - x1 + x2 - x3;\r\n\t\t dy1 = y1 - y2;\r\n\t\t denominator = dx1 * dy2 - dx2 * dy1;\r\n\t\t a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\r\n\t\t a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\r\n\t\treturn new PerspectiveTransform(x1 - x0 + a13 * x1, x3 - x0 + a23 * x3, x0, y1 - y0 + a13 * y1, y3 - y0 + a23 * y3, y0, a13, a23, 1.0);\r\n\t}\r\n}\r\n\r\nPerspectiveTransform.quadrilateralToSquare=function( x0,  y0,  x1,  y1,  x2,  y2,  x3,  y3)\r\n{\r\n\t// Here, the adjoint serves as the inverse:\r\n\treturn this.squareToQuadrilateral(x0, y0, x1, y1, x2, y2, x3, y3).buildAdjoint();\r\n}\r\n\r\nfunction DetectorResult(bits,  points)\r\n{\r\n\tthis.bits = bits;\r\n\tthis.points = points;\r\n}\r\n\r\n\r\nfunction Detector(image)\r\n{\r\n\tthis.image=image;\r\n\tthis.resultPointCallback = null;\r\n\t\r\n\tthis.sizeOfBlackWhiteBlackRun=function( fromX,  fromY,  toX,  toY)\r\n\t\t{\r\n\t\t\t// Mild variant of Bresenham's algorithm;\r\n\t\t\t// see http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\r\n\t\t\tvar steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\r\n\t\t\tif (steep)\r\n\t\t\t{\r\n\t\t\t\tvar temp = fromX;\r\n\t\t\t\tfromX = fromY;\r\n\t\t\t\tfromY = temp;\r\n\t\t\t\ttemp = toX;\r\n\t\t\t\ttoX = toY;\r\n\t\t\t\ttoY = temp;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar dx = Math.abs(toX - fromX);\r\n\t\t\tvar dy = Math.abs(toY - fromY);\r\n\t\t\tvar error = - dx >> 1;\r\n\t\t\tvar ystep = fromY < toY?1:- 1;\r\n\t\t\tvar xstep = fromX < toX?1:- 1;\r\n\t\t\tvar state = 0; // In black pixels, looking for white, first or second time\r\n\t\t\tfor (var x = fromX, y = fromY; x != toX; x += xstep)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tvar realX = steep?y:x;\r\n\t\t\t\tvar realY = steep?x:y;\r\n\t\t\t\tif (state == 1)\r\n\t\t\t\t{\r\n\t\t\t\t\t// In white pixels, looking for black\r\n\t\t\t\t\tif (this.image[realX + realY*qrcode.width])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstate++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!this.image[realX + realY*qrcode.width])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstate++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (state == 3)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Found black, white, black, and stumbled back onto white; done\r\n\t\t\t\t\tvar diffX = x - fromX;\r\n\t\t\t\t\tvar diffY = y - fromY;\r\n\t\t\t\t\treturn  Math.sqrt( (diffX * diffX + diffY * diffY));\r\n\t\t\t\t}\r\n\t\t\t\terror += dy;\r\n\t\t\t\tif (error > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (y == toY)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ty += ystep;\r\n\t\t\t\t\terror -= dx;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar diffX2 = toX - fromX;\r\n\t\t\tvar diffY2 = toY - fromY;\r\n\t\t\treturn  Math.sqrt( (diffX2 * diffX2 + diffY2 * diffY2));\r\n\t\t}\r\n\r\n\t\r\n\tthis.sizeOfBlackWhiteBlackRunBothWays=function( fromX,  fromY,  toX,  toY)\r\n\t\t{\r\n\t\t\t\r\n\t\t\tvar result = this.sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY);\r\n\t\t\t\r\n\t\t\t// Now count other way -- don't run off image though of course\r\n\t\t\tvar scale = 1.0;\r\n\t\t\tvar otherToX = fromX - (toX - fromX);\r\n\t\t\tif (otherToX < 0)\r\n\t\t\t{\r\n\t\t\t\tscale =  fromX /  (fromX - otherToX);\r\n\t\t\t\totherToX = 0;\r\n\t\t\t}\r\n\t\t\telse if (otherToX >= qrcode.width)\r\n\t\t\t{\r\n\t\t\t\tscale =  (qrcode.width - 1 - fromX) /  (otherToX - fromX);\r\n\t\t\t\totherToX = qrcode.width - 1;\r\n\t\t\t}\r\n\t\t\tvar otherToY = Math.floor (fromY - (toY - fromY) * scale);\r\n\t\t\t\r\n\t\t\tscale = 1.0;\r\n\t\t\tif (otherToY < 0)\r\n\t\t\t{\r\n\t\t\t\tscale =  fromY /  (fromY - otherToY);\r\n\t\t\t\totherToY = 0;\r\n\t\t\t}\r\n\t\t\telse if (otherToY >= qrcode.height)\r\n\t\t\t{\r\n\t\t\t\tscale =  (qrcode.height - 1 - fromY) /  (otherToY - fromY);\r\n\t\t\t\totherToY = qrcode.height - 1;\r\n\t\t\t}\r\n\t\t\totherToX = Math.floor (fromX + (otherToX - fromX) * scale);\r\n\t\t\t\r\n\t\t\tresult += this.sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY);\r\n\t\t\treturn result - 1.0; // -1 because we counted the middle pixel twice\r\n\t\t}\r\n\t\t\r\n\r\n\t\r\n\tthis.calculateModuleSizeOneWay=function( pattern,  otherPattern)\r\n\t\t{\r\n\t\t\tvar moduleSizeEst1 = this.sizeOfBlackWhiteBlackRunBothWays(Math.floor( pattern.X), Math.floor( pattern.Y), Math.floor( otherPattern.X), Math.floor(otherPattern.Y));\r\n\t\t\tvar moduleSizeEst2 = this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(otherPattern.X), Math.floor(otherPattern.Y), Math.floor( pattern.X), Math.floor(pattern.Y));\r\n\t\t\tif (isNaN(moduleSizeEst1))\r\n\t\t\t{\r\n\t\t\t\treturn moduleSizeEst2 / 7.0;\r\n\t\t\t}\r\n\t\t\tif (isNaN(moduleSizeEst2))\r\n\t\t\t{\r\n\t\t\t\treturn moduleSizeEst1 / 7.0;\r\n\t\t\t}\r\n\t\t\t// Average them, and divide by 7 since we've counted the width of 3 black modules,\r\n\t\t\t// and 1 white and 1 black module on either side. Ergo, divide sum by 14.\r\n\t\t\treturn (moduleSizeEst1 + moduleSizeEst2) / 14.0;\r\n\t\t}\r\n\r\n\t\r\n\tthis.calculateModuleSize=function( topLeft,  topRight,  bottomLeft)\r\n\t\t{\r\n\t\t\t// Take the average\r\n\t\t\treturn (this.calculateModuleSizeOneWay(topLeft, topRight) + this.calculateModuleSizeOneWay(topLeft, bottomLeft)) / 2.0;\r\n\t\t}\r\n\r\n\tthis.distance=function( pattern1,  pattern2)\r\n\t{\r\n\t\txDiff = pattern1.X - pattern2.X;\r\n\t\tyDiff = pattern1.Y - pattern2.Y;\r\n\t\treturn  Math.sqrt( (xDiff * xDiff + yDiff * yDiff));\r\n\t}\r\n\tthis.computeDimension=function( topLeft,  topRight,  bottomLeft,  moduleSize)\r\n\t\t{\r\n\t\t\t\r\n\t\t\tvar tltrCentersDimension = Math.round(this.distance(topLeft, topRight) / moduleSize);\r\n\t\t\tvar tlblCentersDimension = Math.round(this.distance(topLeft, bottomLeft) / moduleSize);\r\n\t\t\tvar dimension = ((tltrCentersDimension + tlblCentersDimension) >> 1) + 7;\r\n\t\t\tswitch (dimension & 0x03)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\t// mod 4\r\n\t\t\t\tcase 0: \r\n\t\t\t\t\tdimension++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t// 1? do nothing\r\n\t\t\t\t\r\n\t\t\t\tcase 2: \r\n\t\t\t\t\tdimension--;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\tcase 3: \r\n\t\t\t\t\tthrow \"Error\";\r\n\t\t\t\t}\r\n\t\t\treturn dimension;\r\n\t\t}\r\n\r\n\tthis.findAlignmentInRegion=function( overallEstModuleSize,  estAlignmentX,  estAlignmentY,  allowanceFactor)\r\n\t\t{\r\n\t\t\t// Look for an alignment pattern (3 modules in size) around where it\r\n\t\t\t// should be\r\n\t\t\tvar allowance = Math.floor (allowanceFactor * overallEstModuleSize);\r\n\t\t\tvar alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);\r\n\t\t\tvar alignmentAreaRightX = Math.min(qrcode.width - 1, estAlignmentX + allowance);\r\n\t\t\tif (alignmentAreaRightX - alignmentAreaLeftX < overallEstModuleSize * 3)\r\n\t\t\t{\r\n\t\t\t\tthrow \"Error\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);\r\n\t\t\tvar alignmentAreaBottomY = Math.min(qrcode.height - 1, estAlignmentY + allowance);\r\n\t\t\t\r\n\t\t\tvar alignmentFinder = new AlignmentPatternFinder(this.image, alignmentAreaLeftX, alignmentAreaTopY, alignmentAreaRightX - alignmentAreaLeftX, alignmentAreaBottomY - alignmentAreaTopY, overallEstModuleSize, this.resultPointCallback);\r\n\t\t\treturn alignmentFinder.find();\r\n\t\t}\r\n\t\t\r\n\tthis.createTransform=function( topLeft,  topRight,  bottomLeft, alignmentPattern, dimension)\r\n\t\t{\r\n\t\t\tvar dimMinusThree =  dimension - 3.5;\r\n\t\t\tvar bottomRightX;\r\n\t\t\tvar bottomRightY;\r\n\t\t\tvar sourceBottomRightX;\r\n\t\t\tvar sourceBottomRightY;\r\n\t\t\tif (alignmentPattern != null)\r\n\t\t\t{\r\n\t\t\t\tbottomRightX = alignmentPattern.X;\r\n\t\t\t\tbottomRightY = alignmentPattern.Y;\r\n\t\t\t\tsourceBottomRightX = sourceBottomRightY = dimMinusThree - 3.0;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// Don't have an alignment pattern, just make up the bottom-right point\r\n\t\t\t\tbottomRightX = (topRight.X - topLeft.X) + bottomLeft.X;\r\n\t\t\t\tbottomRightY = (topRight.Y - topLeft.Y) + bottomLeft.Y;\r\n\t\t\t\tsourceBottomRightX = sourceBottomRightY = dimMinusThree;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar transform = PerspectiveTransform.quadrilateralToQuadrilateral(3.5, 3.5, dimMinusThree, 3.5, sourceBottomRightX, sourceBottomRightY, 3.5, dimMinusThree, topLeft.X, topLeft.Y, topRight.X, topRight.Y, bottomRightX, bottomRightY, bottomLeft.X, bottomLeft.Y);\r\n\t\t\t\r\n\t\t\treturn transform;\r\n\t\t}\t\t\r\n\t\r\n\tthis.sampleGrid=function( image,  transform,  dimension)\r\n\t\t{\r\n\t\t\t\r\n\t\t\tvar sampler = GridSampler;\r\n\t\t\treturn sampler.sampleGrid3(image, dimension, transform);\r\n\t\t}\r\n\t\r\n\tthis.processFinderPatternInfo = function( info)\r\n\t\t{\r\n\t\t\t\r\n\t\t\tvar topLeft = info.TopLeft;\r\n\t\t\tvar topRight = info.TopRight;\r\n\t\t\tvar bottomLeft = info.BottomLeft;\r\n\t\t\t\r\n\t\t\tvar moduleSize = this.calculateModuleSize(topLeft, topRight, bottomLeft);\r\n\t\t\tif (moduleSize < 1.0)\r\n\t\t\t{\r\n\t\t\t\tthrow \"Error\";\r\n\t\t\t}\r\n\t\t\tvar dimension = this.computeDimension(topLeft, topRight, bottomLeft, moduleSize);\r\n\t\t\tvar provisionalVersion = Version.getProvisionalVersionForDimension(dimension);\r\n\t\t\tvar modulesBetweenFPCenters = provisionalVersion.DimensionForVersion - 7;\r\n\t\t\t\r\n\t\t\tvar alignmentPattern = null;\r\n\t\t\t// Anything above version 1 has an alignment pattern\r\n\t\t\tif (provisionalVersion.AlignmentPatternCenters.length > 0)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\t// Guess where a \"bottom right\" finder pattern would have been\r\n\t\t\t\tvar bottomRightX = topRight.X - topLeft.X + bottomLeft.X;\r\n\t\t\t\tvar bottomRightY = topRight.Y - topLeft.Y + bottomLeft.Y;\r\n\t\t\t\t\r\n\t\t\t\t// Estimate that alignment pattern is closer by 3 modules\r\n\t\t\t\t// from \"bottom right\" to known top left location\r\n\t\t\t\tvar correctionToTopLeft = 1.0 - 3.0 /  modulesBetweenFPCenters;\r\n\t\t\t\tvar estAlignmentX = Math.floor (topLeft.X + correctionToTopLeft * (bottomRightX - topLeft.X));\r\n\t\t\t\tvar estAlignmentY = Math.floor (topLeft.Y + correctionToTopLeft * (bottomRightY - topLeft.Y));\r\n\t\t\t\t\r\n\t\t\t\t// Kind of arbitrary -- expand search radius before giving up\r\n\t\t\t\tfor (var i = 4; i <= 16; i <<= 1)\r\n\t\t\t\t{\r\n\t\t\t\t\t//try\r\n\t\t\t\t\t//{\r\n\t\t\t\t\t\talignmentPattern = this.findAlignmentInRegion(moduleSize, estAlignmentX, estAlignmentY,  i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t//}\r\n\t\t\t\t\t//catch (re)\r\n\t\t\t\t\t//{\r\n\t\t\t\t\t\t// try next round\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\t\t\t\t// If we didn't find alignment pattern... well try anyway without it\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar transform = this.createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension);\r\n\t\t\t\r\n\t\t\tvar bits = this.sampleGrid(this.image, transform, dimension);\r\n\t\t\t\r\n\t\t\tvar points;\r\n\t\t\tif (alignmentPattern == null)\r\n\t\t\t{\r\n\t\t\t\tpoints = new Array(bottomLeft, topLeft, topRight);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tpoints = new Array(bottomLeft, topLeft, topRight, alignmentPattern);\r\n\t\t\t}\r\n\t\t\treturn new DetectorResult(bits, points);\r\n\t\t}\r\n\t\t\r\n\r\n\t\r\n\tthis.detect=function()\r\n\t{\r\n\t\tvar info =  new FinderPatternFinder().findFinderPattern(this.image);\r\n\t\t\t\r\n\t\treturn this.processFinderPatternInfo(info); \r\n\t}\r\n}\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nvar FORMAT_INFO_MASK_QR = 0x5412;\r\nvar FORMAT_INFO_DECODE_LOOKUP = new Array(new Array(0x5412, 0x00), new Array(0x5125, 0x01), new Array(0x5E7C, 0x02), new Array(0x5B4B, 0x03), new Array(0x45F9, 0x04), new Array(0x40CE, 0x05), new Array(0x4F97, 0x06), new Array(0x4AA0, 0x07), new Array(0x77C4, 0x08), new Array(0x72F3, 0x09), new Array(0x7DAA, 0x0A), new Array(0x789D, 0x0B), new Array(0x662F, 0x0C), new Array(0x6318, 0x0D), new Array(0x6C41, 0x0E), new Array(0x6976, 0x0F), new Array(0x1689, 0x10), new Array(0x13BE, 0x11), new Array(0x1CE7, 0x12), new Array(0x19D0, 0x13), new Array(0x0762, 0x14), new Array(0x0255, 0x15), new Array(0x0D0C, 0x16), new Array(0x083B, 0x17), new Array(0x355F, 0x18), new Array(0x3068, 0x19), new Array(0x3F31, 0x1A), new Array(0x3A06, 0x1B), new Array(0x24B4, 0x1C), new Array(0x2183, 0x1D), new Array(0x2EDA, 0x1E), new Array(0x2BED, 0x1F));\r\nvar BITS_SET_IN_HALF_BYTE = new Array(0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4);\r\n\r\n\r\nfunction FormatInformation(formatInfo)\r\n{\r\n\tthis.errorCorrectionLevel = ErrorCorrectionLevel.forBits((formatInfo >> 3) & 0x03);\r\n\tthis.dataMask =  (formatInfo & 0x07);\r\n\r\n\tthis.__defineGetter__(\"ErrorCorrectionLevel\", function()\r\n\t{\r\n\t\treturn this.errorCorrectionLevel;\r\n\t});\r\n\tthis.__defineGetter__(\"DataMask\", function()\r\n\t{\r\n\t\treturn this.dataMask;\r\n\t});\r\n\tthis.GetHashCode=function()\r\n\t{\r\n\t\treturn (this.errorCorrectionLevel.ordinal() << 3) |  dataMask;\r\n\t}\r\n\tthis.Equals=function( o)\r\n\t{\r\n\t\tvar other =  o;\r\n\t\treturn this.errorCorrectionLevel == other.errorCorrectionLevel && this.dataMask == other.dataMask;\r\n\t}\r\n}\r\n\r\nFormatInformation.numBitsDiffering=function( a,  b)\r\n{\r\n\ta ^= b; // a now has a 1 bit exactly where its bit differs with b's\r\n\t// Count bits set quickly with a series of lookups:\r\n\treturn BITS_SET_IN_HALF_BYTE[a & 0x0F] + BITS_SET_IN_HALF_BYTE[(URShift(a, 4) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 8) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 12) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 16) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 20) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 24) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 28) & 0x0F)];\r\n}\r\n\r\nFormatInformation.decodeFormatInformation=function( maskedFormatInfo)\r\n{\r\n\tvar formatInfo = FormatInformation.doDecodeFormatInformation(maskedFormatInfo);\r\n\tif (formatInfo != null)\r\n\t{\r\n\t\treturn formatInfo;\r\n\t}\r\n\t// Should return null, but, some QR codes apparently\r\n\t// do not mask this info. Try again by actually masking the pattern\r\n\t// first\r\n\treturn FormatInformation.doDecodeFormatInformation(maskedFormatInfo ^ FORMAT_INFO_MASK_QR);\r\n}\r\nFormatInformation.doDecodeFormatInformation=function( maskedFormatInfo)\r\n{\r\n\t// Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing\r\n\tvar bestDifference = 0xffffffff;\r\n\tvar bestFormatInfo = 0;\r\n\tfor (var i = 0; i < FORMAT_INFO_DECODE_LOOKUP.length; i++)\r\n\t{\r\n\t\tvar decodeInfo = FORMAT_INFO_DECODE_LOOKUP[i];\r\n\t\tvar targetInfo = decodeInfo[0];\r\n\t\tif (targetInfo == maskedFormatInfo)\r\n\t\t{\r\n\t\t\t// Found an exact match\r\n\t\t\treturn new FormatInformation(decodeInfo[1]);\r\n\t\t}\r\n\t\tvar bitsDifference = this.numBitsDiffering(maskedFormatInfo, targetInfo);\r\n\t\tif (bitsDifference < bestDifference)\r\n\t\t{\r\n\t\t\tbestFormatInfo = decodeInfo[1];\r\n\t\t\tbestDifference = bitsDifference;\r\n\t\t}\r\n\t}\r\n\t// Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits\r\n\t// differing means we found a match\r\n\tif (bestDifference <= 3)\r\n\t{\r\n\t\treturn new FormatInformation(bestFormatInfo);\r\n\t}\r\n\treturn null;\r\n}\r\n\r\n\t\t\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction ErrorCorrectionLevel(ordinal,  bits, name)\r\n{\r\n\tthis.ordinal_Renamed_Field = ordinal;\r\n\tthis.bits = bits;\r\n\tthis.name = name;\r\n\tthis.__defineGetter__(\"Bits\", function()\r\n\t{\r\n\t\treturn this.bits;\r\n\t});\r\n\tthis.__defineGetter__(\"Name\", function()\r\n\t{\r\n\t\treturn this.name;\r\n\t});\r\n\tthis.ordinal=function()\r\n\t{\r\n\t\treturn this.ordinal_Renamed_Field;\r\n\t}\r\n}\r\n\r\nErrorCorrectionLevel.forBits=function( bits)\r\n{\r\n\tif (bits < 0 || bits >= FOR_BITS.length)\r\n\t{\r\n\t\tthrow \"ArgumentException\";\r\n\t}\r\n\treturn FOR_BITS[bits];\r\n}\r\n\r\nvar L = new ErrorCorrectionLevel(0, 0x01, \"L\");\r\nvar M = new ErrorCorrectionLevel(1, 0x00, \"M\");\r\nvar Q = new ErrorCorrectionLevel(2, 0x03, \"Q\");\r\nvar H = new ErrorCorrectionLevel(3, 0x02, \"H\");\r\nvar FOR_BITS = new Array( M, L, H, Q);\r\n\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction BitMatrix( width,  height)\r\n{\r\n\tif(!height)\r\n\t\theight=width;\r\n\tif (width < 1 || height < 1)\r\n\t{\r\n\t\tthrow \"Both dimensions must be greater than 0\";\r\n\t}\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\tvar rowSize = width >> 5;\r\n\tif ((width & 0x1f) != 0)\r\n\t{\r\n\t\trowSize++;\r\n\t}\r\n\tthis.rowSize = rowSize;\r\n\tthis.bits = new Array(rowSize * height);\r\n\tfor(var i=0;i<this.bits.length;i++)\r\n\t\tthis.bits[i]=0;\r\n\t\r\n\tthis.__defineGetter__(\"Width\", function()\r\n\t{\r\n\t\treturn this.width;\r\n\t});\r\n\tthis.__defineGetter__(\"Height\", function()\r\n\t{\r\n\t\treturn this.height;\r\n\t});\r\n\tthis.__defineGetter__(\"Dimension\", function()\r\n\t{\r\n\t\tif (this.width != this.height)\r\n\t\t{\r\n\t\t\tthrow \"Can't call getDimension() on a non-square matrix\";\r\n\t\t}\r\n\t\treturn this.width;\r\n\t});\r\n\t\r\n\tthis.get_Renamed=function( x,  y)\r\n\t\t{\r\n\t\t\tvar offset = y * this.rowSize + (x >> 5);\r\n\t\t\treturn ((URShift(this.bits[offset], (x & 0x1f))) & 1) != 0;\r\n\t\t}\r\n\tthis.set_Renamed=function( x,  y)\r\n\t\t{\r\n\t\t\tvar offset = y * this.rowSize + (x >> 5);\r\n\t\t\tthis.bits[offset] |= 1 << (x & 0x1f);\r\n\t\t}\r\n\tthis.flip=function( x,  y)\r\n\t\t{\r\n\t\t\tvar offset = y * this.rowSize + (x >> 5);\r\n\t\t\tthis.bits[offset] ^= 1 << (x & 0x1f);\r\n\t\t}\r\n\tthis.clear=function()\r\n\t\t{\r\n\t\t\tvar max = this.bits.length;\r\n\t\t\tfor (var i = 0; i < max; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.bits[i] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\tthis.setRegion=function( left,  top,  width,  height)\r\n\t\t{\r\n\t\t\tif (top < 0 || left < 0)\r\n\t\t\t{\r\n\t\t\t\tthrow \"Left and top must be nonnegative\";\r\n\t\t\t}\r\n\t\t\tif (height < 1 || width < 1)\r\n\t\t\t{\r\n\t\t\t\tthrow \"Height and width must be at least 1\";\r\n\t\t\t}\r\n\t\t\tvar right = left + width;\r\n\t\t\tvar bottom = top + height;\r\n\t\t\tif (bottom > this.height || right > this.width)\r\n\t\t\t{\r\n\t\t\t\tthrow \"The region must fit inside the matrix\";\r\n\t\t\t}\r\n\t\t\tfor (var y = top; y < bottom; y++)\r\n\t\t\t{\r\n\t\t\t\tvar offset = y * this.rowSize;\r\n\t\t\t\tfor (var x = left; x < right; x++)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.bits[offset + (x >> 5)] |= 1 << (x & 0x1f);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n}\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction DataBlock(numDataCodewords,  codewords)\r\n{\r\n\tthis.numDataCodewords = numDataCodewords;\r\n\tthis.codewords = codewords;\r\n\t\r\n\tthis.__defineGetter__(\"NumDataCodewords\", function()\r\n\t{\r\n\t\treturn this.numDataCodewords;\r\n\t});\r\n\tthis.__defineGetter__(\"Codewords\", function()\r\n\t{\r\n\t\treturn this.codewords;\r\n\t});\r\n}\t\r\n\t\r\nDataBlock.getDataBlocks=function(rawCodewords,  version,  ecLevel)\r\n{\r\n\t\r\n\tif (rawCodewords.length != version.TotalCodewords)\r\n\t{\r\n\t\tthrow \"ArgumentException\";\r\n\t}\r\n\t\r\n\t// Figure out the number and size of data blocks used by this version and\r\n\t// error correction level\r\n\tvar ecBlocks = version.getECBlocksForLevel(ecLevel);\r\n\t\r\n\t// First count the total number of data blocks\r\n\tvar totalBlocks = 0;\r\n\tvar ecBlockArray = ecBlocks.getECBlocks();\r\n\tfor (var i = 0; i < ecBlockArray.length; i++)\r\n\t{\r\n\t\ttotalBlocks += ecBlockArray[i].Count;\r\n\t}\r\n\t\r\n\t// Now establish DataBlocks of the appropriate size and number of data codewords\r\n\tvar result = new Array(totalBlocks);\r\n\tvar numResultBlocks = 0;\r\n\tfor (var j = 0; j < ecBlockArray.length; j++)\r\n\t{\r\n\t\tvar ecBlock = ecBlockArray[j];\r\n\t\tfor (var i = 0; i < ecBlock.Count; i++)\r\n\t\t{\r\n\t\t\tvar numDataCodewords = ecBlock.DataCodewords;\r\n\t\t\tvar numBlockCodewords = ecBlocks.ECCodewordsPerBlock + numDataCodewords;\r\n\t\t\tresult[numResultBlocks++] = new DataBlock(numDataCodewords, new Array(numBlockCodewords));\r\n\t\t}\r\n\t}\r\n\t\r\n\t// All blocks have the same amount of data, except that the last n\r\n\t// (where n may be 0) have 1 more byte. Figure out where these start.\r\n\tvar shorterBlocksTotalCodewords = result[0].codewords.length;\r\n\tvar longerBlocksStartAt = result.length - 1;\r\n\twhile (longerBlocksStartAt >= 0)\r\n\t{\r\n\t\tvar numCodewords = result[longerBlocksStartAt].codewords.length;\r\n\t\tif (numCodewords == shorterBlocksTotalCodewords)\r\n\t\t{\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tlongerBlocksStartAt--;\r\n\t}\r\n\tlongerBlocksStartAt++;\r\n\t\r\n\tvar shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords - ecBlocks.ECCodewordsPerBlock;\r\n\t// The last elements of result may be 1 element longer;\r\n\t// first fill out as many elements as all of them have\r\n\tvar rawCodewordsOffset = 0;\r\n\tfor (var i = 0; i < shorterBlocksNumDataCodewords; i++)\r\n\t{\r\n\t\tfor (var j = 0; j < numResultBlocks; j++)\r\n\t\t{\r\n\t\t\tresult[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\r\n\t\t}\r\n\t}\r\n\t// Fill out the last data block in the longer ones\r\n\tfor (var j = longerBlocksStartAt; j < numResultBlocks; j++)\r\n\t{\r\n\t\tresult[j].codewords[shorterBlocksNumDataCodewords] = rawCodewords[rawCodewordsOffset++];\r\n\t}\r\n\t// Now add in error correction blocks\r\n\tvar max = result[0].codewords.length;\r\n\tfor (var i = shorterBlocksNumDataCodewords; i < max; i++)\r\n\t{\r\n\t\tfor (var j = 0; j < numResultBlocks; j++)\r\n\t\t{\r\n\t\t\tvar iOffset = j < longerBlocksStartAt?i:i + 1;\r\n\t\t\tresult[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction BitMatrixParser(bitMatrix)\r\n{\r\n\tvar dimension = bitMatrix.Dimension;\r\n\tif (dimension < 21 || (dimension & 0x03) != 1)\r\n\t{\r\n\t\tthrow \"Error BitMatrixParser\";\r\n\t}\r\n\tthis.bitMatrix = bitMatrix;\r\n\tthis.parsedVersion = null;\r\n\tthis.parsedFormatInfo = null;\r\n\t\r\n\tthis.copyBit=function( i,  j,  versionBits)\r\n\t{\r\n\t\treturn this.bitMatrix.get_Renamed(i, j)?(versionBits << 1) | 0x1:versionBits << 1;\r\n\t}\r\n\t\r\n\tthis.readFormatInformation=function()\r\n\t{\r\n\t\t\tif (this.parsedFormatInfo != null)\r\n\t\t\t{\r\n\t\t\t\treturn this.parsedFormatInfo;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Read top-left format info bits\r\n\t\t\tvar formatInfoBits = 0;\r\n\t\t\tfor (var i = 0; i < 6; i++)\r\n\t\t\t{\r\n\t\t\t\tformatInfoBits = this.copyBit(i, 8, formatInfoBits);\r\n\t\t\t}\r\n\t\t\t// .. and skip a bit in the timing pattern ...\r\n\t\t\tformatInfoBits = this.copyBit(7, 8, formatInfoBits);\r\n\t\t\tformatInfoBits = this.copyBit(8, 8, formatInfoBits);\r\n\t\t\tformatInfoBits = this.copyBit(8, 7, formatInfoBits);\r\n\t\t\t// .. and skip a bit in the timing pattern ...\r\n\t\t\tfor (var j = 5; j >= 0; j--)\r\n\t\t\t{\r\n\t\t\t\tformatInfoBits = this.copyBit(8, j, formatInfoBits);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits);\r\n\t\t\tif (this.parsedFormatInfo != null)\r\n\t\t\t{\r\n\t\t\t\treturn this.parsedFormatInfo;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Hmm, failed. Try the top-right/bottom-left pattern\r\n\t\t\tvar dimension = this.bitMatrix.Dimension;\r\n\t\t\tformatInfoBits = 0;\r\n\t\t\tvar iMin = dimension - 8;\r\n\t\t\tfor (var i = dimension - 1; i >= iMin; i--)\r\n\t\t\t{\r\n\t\t\t\tformatInfoBits = this.copyBit(i, 8, formatInfoBits);\r\n\t\t\t}\r\n\t\t\tfor (var j = dimension - 7; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tformatInfoBits = this.copyBit(8, j, formatInfoBits);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits);\r\n\t\t\tif (this.parsedFormatInfo != null)\r\n\t\t\t{\r\n\t\t\t\treturn this.parsedFormatInfo;\r\n\t\t\t}\r\n\t\t\tthrow \"Error readFormatInformation\";\t\r\n\t}\r\n\tthis.readVersion=function()\r\n\t\t{\r\n\t\t\t\r\n\t\t\tif (this.parsedVersion != null)\r\n\t\t\t{\r\n\t\t\t\treturn this.parsedVersion;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar dimension = this.bitMatrix.Dimension;\r\n\t\t\t\r\n\t\t\tvar provisionalVersion = (dimension - 17) >> 2;\r\n\t\t\tif (provisionalVersion <= 6)\r\n\t\t\t{\r\n\t\t\t\treturn Version.getVersionForNumber(provisionalVersion);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Read top-right version info: 3 wide by 6 tall\r\n\t\t\tvar versionBits = 0;\r\n\t\t\tvar ijMin = dimension - 11;\r\n\t\t\tfor (var j = 5; j >= 0; j--)\r\n\t\t\t{\r\n\t\t\t\tfor (var i = dimension - 9; i >= ijMin; i--)\r\n\t\t\t\t{\r\n\t\t\t\t\tversionBits = this.copyBit(i, j, versionBits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.parsedVersion = Version.decodeVersionInformation(versionBits);\r\n\t\t\tif (this.parsedVersion != null && this.parsedVersion.DimensionForVersion == dimension)\r\n\t\t\t{\r\n\t\t\t\treturn this.parsedVersion;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Hmm, failed. Try bottom left: 6 wide by 3 tall\r\n\t\t\tversionBits = 0;\r\n\t\t\tfor (var i = 5; i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\tfor (var j = dimension - 9; j >= ijMin; j--)\r\n\t\t\t\t{\r\n\t\t\t\t\tversionBits = this.copyBit(i, j, versionBits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.parsedVersion = Version.decodeVersionInformation(versionBits);\r\n\t\t\tif (this.parsedVersion != null && this.parsedVersion.DimensionForVersion == dimension)\r\n\t\t\t{\r\n\t\t\t\treturn this.parsedVersion;\r\n\t\t\t}\r\n\t\t\tthrow \"Error readVersion\";\r\n\t\t}\r\n\tthis.readCodewords=function()\r\n\t\t{\r\n\t\t\t\r\n\t\t\tvar formatInfo = this.readFormatInformation();\r\n\t\t\tvar version = this.readVersion();\r\n\t\t\t\r\n\t\t\t// Get the data mask for the format used in this QR Code. This will exclude\r\n\t\t\t// some bits from reading as we wind through the bit matrix.\r\n\t\t\tvar dataMask = DataMask.forReference( formatInfo.DataMask);\r\n\t\t\tvar dimension = this.bitMatrix.Dimension;\r\n\t\t\tdataMask.unmaskBitMatrix(this.bitMatrix, dimension);\r\n\t\t\t\r\n\t\t\tvar functionPattern = version.buildFunctionPattern();\r\n\t\t\t\r\n\t\t\tvar readingUp = true;\r\n\t\t\tvar result = new Array(version.TotalCodewords);\r\n\t\t\tvar resultOffset = 0;\r\n\t\t\tvar currentByte = 0;\r\n\t\t\tvar bitsRead = 0;\r\n\t\t\t// Read columns in pairs, from right to left\r\n\t\t\tfor (var j = dimension - 1; j > 0; j -= 2)\r\n\t\t\t{\r\n\t\t\t\tif (j == 6)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Skip whole column with vertical alignment pattern;\r\n\t\t\t\t\t// saves time and makes the other code proceed more cleanly\r\n\t\t\t\t\tj--;\r\n\t\t\t\t}\r\n\t\t\t\t// Read alternatingly from bottom to top then top to bottom\r\n\t\t\t\tfor (var count = 0; count < dimension; count++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar i = readingUp?dimension - 1 - count:count;\r\n\t\t\t\t\tfor (var col = 0; col < 2; col++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Ignore bits covered by the function pattern\r\n\t\t\t\t\t\tif (!functionPattern.get_Renamed(j - col, i))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Read a bit\r\n\t\t\t\t\t\t\tbitsRead++;\r\n\t\t\t\t\t\t\tcurrentByte <<= 1;\r\n\t\t\t\t\t\t\tif (this.bitMatrix.get_Renamed(j - col, i))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrentByte |= 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// If we've made a whole byte, save it off\r\n\t\t\t\t\t\t\tif (bitsRead == 8)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tresult[resultOffset++] =  currentByte;\r\n\t\t\t\t\t\t\t\tbitsRead = 0;\r\n\t\t\t\t\t\t\t\tcurrentByte = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treadingUp ^= true; // readingUp = !readingUp; // switch directions\r\n\t\t\t}\r\n\t\t\tif (resultOffset != version.TotalCodewords)\r\n\t\t\t{\r\n\t\t\t\tthrow \"Error readCodewords\";\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n}\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nDataMask = {};\r\n\r\nDataMask.forReference = function(reference)\r\n{\r\n\tif (reference < 0 || reference > 7)\r\n\t{\r\n\t\tthrow \"System.ArgumentException\";\r\n\t}\r\n\treturn DataMask.DATA_MASKS[reference];\r\n}\r\n\r\nfunction DataMask000()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\treturn ((i + j) & 0x01) == 0;\r\n\t}\r\n}\r\n\r\nfunction DataMask001()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\treturn (i & 0x01) == 0;\r\n\t}\r\n}\r\n\r\nfunction DataMask010()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\treturn j % 3 == 0;\r\n\t}\r\n}\r\n\r\nfunction DataMask011()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\treturn (i + j) % 3 == 0;\r\n\t}\r\n}\r\n\r\nfunction DataMask100()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\treturn (((URShift(i, 1)) + (j / 3)) & 0x01) == 0;\r\n\t}\r\n}\r\n\r\nfunction DataMask101()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\tvar temp = i * j;\r\n\t\treturn (temp & 0x01) + (temp % 3) == 0;\r\n\t}\r\n}\r\n\r\nfunction DataMask110()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\tvar temp = i * j;\r\n\t\treturn (((temp & 0x01) + (temp % 3)) & 0x01) == 0;\r\n\t}\r\n}\r\nfunction DataMask111()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\treturn ((((i + j) & 0x01) + ((i * j) % 3)) & 0x01) == 0;\r\n\t}\r\n}\r\n\r\nDataMask.DATA_MASKS = new Array(new DataMask000(), new DataMask001(), new DataMask010(), new DataMask011(), new DataMask100(), new DataMask101(), new DataMask110(), new DataMask111());\r\n\r\n\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction ReedSolomonDecoder(field)\r\n{\r\n\tthis.field = field;\r\n\tthis.decode=function(received,  twoS)\r\n\t{\r\n\t\t\tvar poly = new GF256Poly(this.field, received);\r\n\t\t\tvar syndromeCoefficients = new Array(twoS);\r\n\t\t\tfor(var i=0;i<syndromeCoefficients.length;i++)syndromeCoefficients[i]=0;\r\n\t\t\tvar dataMatrix = false;//this.field.Equals(GF256.DATA_MATRIX_FIELD);\r\n\t\t\tvar noError = true;\r\n\t\t\tfor (var i = 0; i < twoS; i++)\r\n\t\t\t{\r\n\t\t\t\t// Thanks to sanfordsquires for this fix:\r\n\t\t\t\tvar eval = poly.evaluateAt(this.field.exp(dataMatrix?i + 1:i));\r\n\t\t\t\tsyndromeCoefficients[syndromeCoefficients.length - 1 - i] = eval;\r\n\t\t\t\tif (eval != 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tnoError = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (noError)\r\n\t\t\t{\r\n\t\t\t\treturn ;\r\n\t\t\t}\r\n\t\t\tvar syndrome = new GF256Poly(this.field, syndromeCoefficients);\r\n\t\t\tvar sigmaOmega = this.runEuclideanAlgorithm(this.field.buildMonomial(twoS, 1), syndrome, twoS);\r\n\t\t\tvar sigma = sigmaOmega[0];\r\n\t\t\tvar omega = sigmaOmega[1];\r\n\t\t\tvar errorLocations = this.findErrorLocations(sigma);\r\n\t\t\tvar errorMagnitudes = this.findErrorMagnitudes(omega, errorLocations, dataMatrix);\r\n\t\t\tfor (var i = 0; i < errorLocations.length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar position = received.length - 1 - this.field.log(errorLocations[i]);\r\n\t\t\t\tif (position < 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tthrow \"ReedSolomonException Bad error location\";\r\n\t\t\t\t}\r\n\t\t\t\treceived[position] = GF256.addOrSubtract(received[position], errorMagnitudes[i]);\r\n\t\t\t}\r\n\t}\r\n\t\r\n\tthis.runEuclideanAlgorithm=function( a,  b,  R)\r\n\t\t{\r\n\t\t\t// Assume a's degree is >= b's\r\n\t\t\tif (a.Degree < b.Degree)\r\n\t\t\t{\r\n\t\t\t\tvar temp = a;\r\n\t\t\t\ta = b;\r\n\t\t\t\tb = temp;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar rLast = a;\r\n\t\t\tvar r = b;\r\n\t\t\tvar sLast = this.field.One;\r\n\t\t\tvar s = this.field.Zero;\r\n\t\t\tvar tLast = this.field.Zero;\r\n\t\t\tvar t = this.field.One;\r\n\t\t\t\r\n\t\t\t// Run Euclidean algorithm until r's degree is less than R/2\r\n\t\t\twhile (r.Degree >= Math.floor(R / 2))\r\n\t\t\t{\r\n\t\t\t\tvar rLastLast = rLast;\r\n\t\t\t\tvar sLastLast = sLast;\r\n\t\t\t\tvar tLastLast = tLast;\r\n\t\t\t\trLast = r;\r\n\t\t\t\tsLast = s;\r\n\t\t\t\ttLast = t;\r\n\t\t\t\t\r\n\t\t\t\t// Divide rLastLast by rLast, with quotient in q and remainder in r\r\n\t\t\t\tif (rLast.Zero)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Oops, Euclidean algorithm already terminated?\r\n\t\t\t\t\tthrow \"r_{i-1} was zero\";\r\n\t\t\t\t}\r\n\t\t\t\tr = rLastLast;\r\n\t\t\t\tvar q = this.field.Zero;\r\n\t\t\t\tvar denominatorLeadingTerm = rLast.getCoefficient(rLast.Degree);\r\n\t\t\t\tvar dltInverse = this.field.inverse(denominatorLeadingTerm);\r\n\t\t\t\twhile (r.Degree >= rLast.Degree && !r.Zero)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar degreeDiff = r.Degree - rLast.Degree;\r\n\t\t\t\t\tvar scale = this.field.multiply(r.getCoefficient(r.Degree), dltInverse);\r\n\t\t\t\t\tq = q.addOrSubtract(this.field.buildMonomial(degreeDiff, scale));\r\n\t\t\t\t\tr = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\r\n\t\t\t\t\t//r.EXE();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ts = q.multiply1(sLast).addOrSubtract(sLastLast);\r\n\t\t\t\tt = q.multiply1(tLast).addOrSubtract(tLastLast);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar sigmaTildeAtZero = t.getCoefficient(0);\r\n\t\t\tif (sigmaTildeAtZero == 0)\r\n\t\t\t{\r\n\t\t\t\tthrow \"ReedSolomonException sigmaTilde(0) was zero\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar inverse = this.field.inverse(sigmaTildeAtZero);\r\n\t\t\tvar sigma = t.multiply2(inverse);\r\n\t\t\tvar omega = r.multiply2(inverse);\r\n\t\t\treturn new Array(sigma, omega);\r\n\t\t}\r\n\tthis.findErrorLocations=function( errorLocator)\r\n\t\t{\r\n\t\t\t// This is a direct application of Chien's search\r\n\t\t\tvar numErrors = errorLocator.Degree;\r\n\t\t\tif (numErrors == 1)\r\n\t\t\t{\r\n\t\t\t\t// shortcut\r\n\t\t\t\treturn new Array(errorLocator.getCoefficient(1));\r\n\t\t\t}\r\n\t\t\tvar result = new Array(numErrors);\r\n\t\t\tvar e = 0;\r\n\t\t\tfor (var i = 1; i < 256 && e < numErrors; i++)\r\n\t\t\t{\r\n\t\t\t\tif (errorLocator.evaluateAt(i) == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[e] = this.field.inverse(i);\r\n\t\t\t\t\te++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (e != numErrors)\r\n\t\t\t{\r\n\t\t\t\tthrow \"Error locator degree does not match number of roots\";\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\tthis.findErrorMagnitudes=function( errorEvaluator,  errorLocations,  dataMatrix)\r\n\t\t{\r\n\t\t\t// This is directly applying Forney's Formula\r\n\t\t\tvar s = errorLocations.length;\r\n\t\t\tvar result = new Array(s);\r\n\t\t\tfor (var i = 0; i < s; i++)\r\n\t\t\t{\r\n\t\t\t\tvar xiInverse = this.field.inverse(errorLocations[i]);\r\n\t\t\t\tvar denominator = 1;\r\n\t\t\t\tfor (var j = 0; j < s; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i != j)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdenominator = this.field.multiply(denominator, GF256.addOrSubtract(1, this.field.multiply(errorLocations[j], xiInverse)));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tresult[i] = this.field.multiply(errorEvaluator.evaluateAt(xiInverse), this.field.inverse(denominator));\r\n\t\t\t\t// Thanks to sanfordsquires for this fix:\r\n\t\t\t\tif (dataMatrix)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = this.field.multiply(result[i], xiInverse);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n}\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction GF256Poly(field,  coefficients)\r\n{\r\n\tif (coefficients == null || coefficients.length == 0)\r\n\t{\r\n\t\tthrow \"System.ArgumentException\";\r\n\t}\r\n\tthis.field = field;\r\n\tvar coefficientsLength = coefficients.length;\r\n\tif (coefficientsLength > 1 && coefficients[0] == 0)\r\n\t{\r\n\t\t// Leading term must be non-zero for anything except the constant polynomial \"0\"\r\n\t\tvar firstNonZero = 1;\r\n\t\twhile (firstNonZero < coefficientsLength && coefficients[firstNonZero] == 0)\r\n\t\t{\r\n\t\t\tfirstNonZero++;\r\n\t\t}\r\n\t\tif (firstNonZero == coefficientsLength)\r\n\t\t{\r\n\t\t\tthis.coefficients = field.Zero.coefficients;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.coefficients = new Array(coefficientsLength - firstNonZero);\r\n\t\t\tfor(var i=0;i<this.coefficients.length;i++)this.coefficients[i]=0;\r\n\t\t\t//Array.Copy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\r\n\t\t\tfor(var ci=0;ci<this.coefficients.length;ci++)this.coefficients[ci]=coefficients[firstNonZero+ci];\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tthis.coefficients = coefficients;\r\n\t}\r\n\t\r\n\tthis.__defineGetter__(\"Zero\", function()\r\n\t{\r\n\t\treturn this.coefficients[0] == 0;\r\n\t});\r\n\tthis.__defineGetter__(\"Degree\", function()\r\n\t{\r\n\t\treturn this.coefficients.length - 1;\r\n\t});\r\n\tthis.__defineGetter__(\"Coefficients\", function()\r\n\t{\r\n\t\treturn this.coefficients;\r\n\t});\r\n\t\r\n\tthis.getCoefficient=function( degree)\r\n\t{\r\n\t\treturn this.coefficients[this.coefficients.length - 1 - degree];\r\n\t}\r\n\t\r\n\tthis.evaluateAt=function( a)\r\n\t{\r\n\t\tif (a == 0)\r\n\t\t{\r\n\t\t\t// Just return the x^0 coefficient\r\n\t\t\treturn this.getCoefficient(0);\r\n\t\t}\r\n\t\tvar size = this.coefficients.length;\r\n\t\tif (a == 1)\r\n\t\t{\r\n\t\t\t// Just the sum of the coefficients\r\n\t\t\tvar result = 0;\r\n\t\t\tfor (var i = 0; i < size; i++)\r\n\t\t\t{\r\n\t\t\t\tresult = GF256.addOrSubtract(result, this.coefficients[i]);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\tvar result2 = this.coefficients[0];\r\n\t\tfor (var i = 1; i < size; i++)\r\n\t\t{\r\n\t\t\tresult2 = GF256.addOrSubtract(this.field.multiply(a, result2), this.coefficients[i]);\r\n\t\t}\r\n\t\treturn result2;\r\n\t}\r\n\t\r\n\tthis.addOrSubtract=function( other)\r\n\t\t{\r\n\t\t\tif (this.field != other.field)\r\n\t\t\t{\r\n\t\t\t\tthrow \"GF256Polys do not have same GF256 field\";\r\n\t\t\t}\r\n\t\t\tif (this.Zero)\r\n\t\t\t{\r\n\t\t\t\treturn other;\r\n\t\t\t}\r\n\t\t\tif (other.Zero)\r\n\t\t\t{\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar smallerCoefficients = this.coefficients;\r\n\t\t\tvar largerCoefficients = other.coefficients;\r\n\t\t\tif (smallerCoefficients.length > largerCoefficients.length)\r\n\t\t\t{\r\n\t\t\t\tvar temp = smallerCoefficients;\r\n\t\t\t\tsmallerCoefficients = largerCoefficients;\r\n\t\t\t\tlargerCoefficients = temp;\r\n\t\t\t}\r\n\t\t\tvar sumDiff = new Array(largerCoefficients.length);\r\n\t\t\tvar lengthDiff = largerCoefficients.length - smallerCoefficients.length;\r\n\t\t\t// Copy high-order terms only found in higher-degree polynomial's coefficients\r\n\t\t\t//Array.Copy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\r\n\t\t\tfor(var ci=0;ci<lengthDiff;ci++)sumDiff[ci]=largerCoefficients[ci];\r\n\t\t\t\r\n\t\t\tfor (var i = lengthDiff; i < largerCoefficients.length; i++)\r\n\t\t\t{\r\n\t\t\t\tsumDiff[i] = GF256.addOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn new GF256Poly(field, sumDiff);\r\n\t}\r\n\tthis.multiply1=function( other)\r\n\t\t{\r\n\t\t\tif (this.field!=other.field)\r\n\t\t\t{\r\n\t\t\t\tthrow \"GF256Polys do not have same GF256 field\";\r\n\t\t\t}\r\n\t\t\tif (this.Zero || other.Zero)\r\n\t\t\t{\r\n\t\t\t\treturn this.field.Zero;\r\n\t\t\t}\r\n\t\t\tvar aCoefficients = this.coefficients;\r\n\t\t\tvar aLength = aCoefficients.length;\r\n\t\t\tvar bCoefficients = other.coefficients;\r\n\t\t\tvar bLength = bCoefficients.length;\r\n\t\t\tvar product = new Array(aLength + bLength - 1);\r\n\t\t\tfor (var i = 0; i < aLength; i++)\r\n\t\t\t{\r\n\t\t\t\tvar aCoeff = aCoefficients[i];\r\n\t\t\t\tfor (var j = 0; j < bLength; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tproduct[i + j] = GF256.addOrSubtract(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn new GF256Poly(this.field, product);\r\n\t\t}\r\n\tthis.multiply2=function( scalar)\r\n\t\t{\r\n\t\t\tif (scalar == 0)\r\n\t\t\t{\r\n\t\t\t\treturn this.field.Zero;\r\n\t\t\t}\r\n\t\t\tif (scalar == 1)\r\n\t\t\t{\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\tvar size = this.coefficients.length;\r\n\t\t\tvar product = new Array(size);\r\n\t\t\tfor (var i = 0; i < size; i++)\r\n\t\t\t{\r\n\t\t\t\tproduct[i] = this.field.multiply(this.coefficients[i], scalar);\r\n\t\t\t}\r\n\t\t\treturn new GF256Poly(this.field, product);\r\n\t\t}\r\n\tthis.multiplyByMonomial=function( degree,  coefficient)\r\n\t\t{\r\n\t\t\tif (degree < 0)\r\n\t\t\t{\r\n\t\t\t\tthrow \"System.ArgumentException\";\r\n\t\t\t}\r\n\t\t\tif (coefficient == 0)\r\n\t\t\t{\r\n\t\t\t\treturn this.field.Zero;\r\n\t\t\t}\r\n\t\t\tvar size = this.coefficients.length;\r\n\t\t\tvar product = new Array(size + degree);\r\n\t\t\tfor(var i=0;i<product.length;i++)product[i]=0;\r\n\t\t\tfor (var i = 0; i < size; i++)\r\n\t\t\t{\r\n\t\t\t\tproduct[i] = this.field.multiply(this.coefficients[i], coefficient);\r\n\t\t\t}\r\n\t\t\treturn new GF256Poly(this.field, product);\r\n\t\t}\r\n\tthis.divide=function( other)\r\n\t\t{\r\n\t\t\tif (this.field!=other.field)\r\n\t\t\t{\r\n\t\t\t\tthrow \"GF256Polys do not have same GF256 field\";\r\n\t\t\t}\r\n\t\t\tif (other.Zero)\r\n\t\t\t{\r\n\t\t\t\tthrow \"Divide by 0\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar quotient = this.field.Zero;\r\n\t\t\tvar remainder = this;\r\n\t\t\t\r\n\t\t\tvar denominatorLeadingTerm = other.getCoefficient(other.Degree);\r\n\t\t\tvar inverseDenominatorLeadingTerm = this.field.inverse(denominatorLeadingTerm);\r\n\t\t\t\r\n\t\t\twhile (remainder.Degree >= other.Degree && !remainder.Zero)\r\n\t\t\t{\r\n\t\t\t\tvar degreeDifference = remainder.Degree - other.Degree;\r\n\t\t\t\tvar scale = this.field.multiply(remainder.getCoefficient(remainder.Degree), inverseDenominatorLeadingTerm);\r\n\t\t\t\tvar term = other.multiplyByMonomial(degreeDifference, scale);\r\n\t\t\t\tvar iterationQuotient = this.field.buildMonomial(degreeDifference, scale);\r\n\t\t\t\tquotient = quotient.addOrSubtract(iterationQuotient);\r\n\t\t\t\tremainder = remainder.addOrSubtract(term);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn new Array(quotient, remainder);\r\n\t\t}\r\n}\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction GF256( primitive)\r\n{\r\n\tthis.expTable = new Array(256);\r\n\tthis.logTable = new Array(256);\r\n\tvar x = 1;\r\n\tfor (var i = 0; i < 256; i++)\r\n\t{\r\n\t\tthis.expTable[i] = x;\r\n\t\tx <<= 1; // x = x * 2; we're assuming the generator alpha is 2\r\n\t\tif (x >= 0x100)\r\n\t\t{\r\n\t\t\tx ^= primitive;\r\n\t\t}\r\n\t}\r\n\tfor (var i = 0; i < 255; i++)\r\n\t{\r\n\t\tthis.logTable[this.expTable[i]] = i;\r\n\t}\r\n\t// logTable[0] == 0 but this should never be used\r\n\tvar at0=new Array(1);at0[0]=0;\r\n\tthis.zero = new GF256Poly(this, new Array(at0));\r\n\tvar at1=new Array(1);at1[0]=1;\r\n\tthis.one = new GF256Poly(this, new Array(at1));\r\n\t\r\n\tthis.__defineGetter__(\"Zero\", function()\r\n\t{\r\n\t\treturn this.zero;\r\n\t});\r\n\tthis.__defineGetter__(\"One\", function()\r\n\t{\r\n\t\treturn this.one;\r\n\t});\r\n\tthis.buildMonomial=function( degree,  coefficient)\r\n\t\t{\r\n\t\t\tif (degree < 0)\r\n\t\t\t{\r\n\t\t\t\tthrow \"System.ArgumentException\";\r\n\t\t\t}\r\n\t\t\tif (coefficient == 0)\r\n\t\t\t{\r\n\t\t\t\treturn zero;\r\n\t\t\t}\r\n\t\t\tvar coefficients = new Array(degree + 1);\r\n\t\t\tfor(var i=0;i<coefficients.length;i++)coefficients[i]=0;\r\n\t\t\tcoefficients[0] = coefficient;\r\n\t\t\treturn new GF256Poly(this, coefficients);\r\n\t\t}\r\n\tthis.exp=function( a)\r\n\t\t{\r\n\t\t\treturn this.expTable[a];\r\n\t\t}\r\n\tthis.log=function( a)\r\n\t\t{\r\n\t\t\tif (a == 0)\r\n\t\t\t{\r\n\t\t\t\tthrow \"System.ArgumentException\";\r\n\t\t\t}\r\n\t\t\treturn this.logTable[a];\r\n\t\t}\r\n\tthis.inverse=function( a)\r\n\t\t{\r\n\t\t\tif (a == 0)\r\n\t\t\t{\r\n\t\t\t\tthrow \"System.ArithmeticException\";\r\n\t\t\t}\r\n\t\t\treturn this.expTable[255 - this.logTable[a]];\r\n\t\t}\r\n\tthis.multiply=function( a,  b)\r\n\t\t{\r\n\t\t\tif (a == 0 || b == 0)\r\n\t\t\t{\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tif (a == 1)\r\n\t\t\t{\r\n\t\t\t\treturn b;\r\n\t\t\t}\r\n\t\t\tif (b == 1)\r\n\t\t\t{\r\n\t\t\t\treturn a;\r\n\t\t\t}\r\n\t\t\treturn this.expTable[(this.logTable[a] + this.logTable[b]) % 255];\r\n\t\t}\t\t\r\n}\r\n\r\nGF256.QR_CODE_FIELD = new GF256(0x011D);\r\nGF256.DATA_MATRIX_FIELD = new GF256(0x012D);\r\n\r\nGF256.addOrSubtract=function( a,  b)\r\n{\r\n\treturn a ^ b;\r\n}\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nDecoder={};\r\nDecoder.rsDecoder = new ReedSolomonDecoder(GF256.QR_CODE_FIELD);\r\n\r\nDecoder.correctErrors=function( codewordBytes,  numDataCodewords)\r\n{\r\n\tvar numCodewords = codewordBytes.length;\r\n\t// First read into an array of ints\r\n\tvar codewordsInts = new Array(numCodewords);\r\n\tfor (var i = 0; i < numCodewords; i++)\r\n\t{\r\n\t\tcodewordsInts[i] = codewordBytes[i] & 0xFF;\r\n\t}\r\n\tvar numECCodewords = codewordBytes.length - numDataCodewords;\r\n\ttry\r\n\t{\r\n\t\tDecoder.rsDecoder.decode(codewordsInts, numECCodewords);\r\n\t\t//var corrector = new ReedSolomon(codewordsInts, numECCodewords);\r\n\t\t//corrector.correct();\r\n\t}\r\n\tcatch ( rse)\r\n\t{\r\n\t\tthrow rse;\r\n\t}\r\n\t// Copy back into array of bytes -- only need to worry about the bytes that were data\r\n\t// We don't care about errors in the error-correction codewords\r\n\tfor (var i = 0; i < numDataCodewords; i++)\r\n\t{\r\n\t\tcodewordBytes[i] =  codewordsInts[i];\r\n\t}\r\n}\r\n\r\nDecoder.decode=function(bits)\r\n{\r\n\tvar parser = new BitMatrixParser(bits);\r\n\tvar version = parser.readVersion();\r\n\tvar ecLevel = parser.readFormatInformation().ErrorCorrectionLevel;\r\n\t\r\n\t// Read codewords\r\n\tvar codewords = parser.readCodewords();\r\n\r\n\t// Separate into data blocks\r\n\tvar dataBlocks = DataBlock.getDataBlocks(codewords, version, ecLevel);\r\n\t\r\n\t// Count total number of data bytes\r\n\tvar totalBytes = 0;\r\n\tfor (var i = 0; i < dataBlocks.length; i++)\r\n\t{\r\n\t\ttotalBytes += dataBlocks[i].NumDataCodewords;\r\n\t}\r\n\tvar resultBytes = new Array(totalBytes);\r\n\tvar resultOffset = 0;\r\n\t\r\n\t// Error-correct and copy data blocks together into a stream of bytes\r\n\tfor (var j = 0; j < dataBlocks.length; j++)\r\n\t{\r\n\t\tvar dataBlock = dataBlocks[j];\r\n\t\tvar codewordBytes = dataBlock.Codewords;\r\n\t\tvar numDataCodewords = dataBlock.NumDataCodewords;\r\n\t\tDecoder.correctErrors(codewordBytes, numDataCodewords);\r\n\t\tfor (var i = 0; i < numDataCodewords; i++)\r\n\t\t{\r\n\t\t\tresultBytes[resultOffset++] = codewordBytes[i];\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Decode the contents of that stream of bytes\r\n\tvar reader = new QRCodeDataBlockReader(resultBytes, version.VersionNumber, ecLevel.Bits);\r\n\treturn reader;\r\n\t//return DecodedBitStreamParser.decode(resultBytes, version, ecLevel);\r\n}\r\n\n/*\n   Copyright 2011 Lazar Laszlo (lazarsoft@gmail.com, www.lazarsoft.info)\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\n\nqrcode = {};\nqrcode.imagedata = null;\nqrcode.width = 0;\nqrcode.height = 0;\nqrcode.qrCodeSymbol = null;\nqrcode.debug = false;\nqrcode.maxImgSize = 1024*1024;\nqrcode.canvasElement = null;\n\nqrcode.sizeOfDataLengthInfo =  [  [ 10, 9, 8, 8 ],  [ 12, 11, 16, 10 ],  [ 14, 13, 16, 12 ] ];\n\nqrcode.callback = null;\n\nqrcode.setCanvasElement = function (element) {\n    qrcode.canvasElement = element;\n}\n\nqrcode.decode = function(src, cb){\n\n    if(arguments.length==0)\n    {\n        var canvas_qr = qrcode.canvasElement;\n        var context = canvas_qr.getContext('2d');\n        qrcode.width = canvas_qr.width;\n        qrcode.height = canvas_qr.height;\n        qrcode.imagedata = context.getImageData(0, 0, qrcode.width, qrcode.height);\n        qrcode.result = qrcode.process(context);\n        if(qrcode.callback!=null)\n            qrcode.callback(qrcode.result);\n        return qrcode.result;\n    }\n    else\n    {\n        var image = new Image();\n        image.onload=function(){\n            var canvas_qr = document.createElement('canvas');\n            var context = canvas_qr.getContext('2d');\n            var nheight = image.height;\n            var nwidth = image.width;\n            if(image.width*image.height>qrcode.maxImgSize)\n            {\n                var ir = image.width / image.height;\n                nheight = Math.sqrt(qrcode.maxImgSize/ir);\n                nwidth=ir*nheight;\n            }\n\n            canvas_qr.width = nwidth;\n            canvas_qr.height = nheight;\n\n            context.drawImage(image, 0, 0, canvas_qr.width, canvas_qr.height );\n            qrcode.width = canvas_qr.width;\n            qrcode.height = canvas_qr.height;\n            try{\n                qrcode.imagedata = context.getImageData(0, 0, canvas_qr.width, canvas_qr.height);\n            }catch(e){\n                qrcode.result = \"Cross domain Error\";\n                if(qrcode.callback!=null)\n                    qrcode.callback(qrcode.result);\n                return;\n            }\n\n            try\n            {\n                qrcode.result = qrcode.process(context);\n                cb(null, qrcode.result);\n            }\n            catch(e)\n            {\n                // console.log(e);\n                qrcode.result = \"Error decoding QR Code from Image\";\n                cb(new Error(\"Error decoding QR Code from Image\"));\n            }\n            if(qrcode.callback!=null)\n                qrcode.callback(qrcode.result);\n        }\n        image.src = src;\n    }\n}\n\nqrcode.isUrl = function(s)\n{\n    var regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n    return regexp.test(s);\n}\n\nqrcode.decode_url = function (s)\n{\n  var escaped = \"\";\n  try{\n    escaped = escape( s );\n  }\n  catch(e)\n  {\n    // console.log(e);\n    escaped = s;\n  }\n  var ret = \"\";\n  try{\n    ret = decodeURIComponent( escaped );\n  }\n  catch(e)\n  {\n    // console.log(e);\n    ret = escaped;\n  }\n  return ret;\n}\n\nqrcode.decode_utf8 = function ( s )\n{\n    if(qrcode.isUrl(s))\n        return qrcode.decode_url(s);\n    else\n        return s;\n}\n\nqrcode.process = function(ctx){\n\n    var start = new Date().getTime();\n\n    var image = qrcode.grayScaleToBitmap(qrcode.grayscale());\n    //var image = qrcode.binarize(128);\n\n    if(qrcode.debug)\n    {\n        for (var y = 0; y < qrcode.height; y++)\n        {\n            for (var x = 0; x < qrcode.width; x++)\n            {\n                var point = (x * 4) + (y * qrcode.width * 4);\n                qrcode.imagedata.data[point] = image[x+y*qrcode.width]?0:0;\n                qrcode.imagedata.data[point+1] = image[x+y*qrcode.width]?0:0;\n                qrcode.imagedata.data[point+2] = image[x+y*qrcode.width]?255:0;\n            }\n        }\n        ctx.putImageData(qrcode.imagedata, 0, 0);\n    }\n\n    //var finderPatternInfo = new FinderPatternFinder().findFinderPattern(image);\n\n    var detector = new Detector(image);\n\n    var qRCodeMatrix = detector.detect();\n\n    /*for (var y = 0; y < qRCodeMatrix.bits.Height; y++)\n    {\n        for (var x = 0; x < qRCodeMatrix.bits.Width; x++)\n        {\n            var point = (x * 4*2) + (y*2 * qrcode.width * 4);\n            qrcode.imagedata.data[point] = qRCodeMatrix.bits.get_Renamed(x,y)?0:0;\n            qrcode.imagedata.data[point+1] = qRCodeMatrix.bits.get_Renamed(x,y)?0:0;\n            qrcode.imagedata.data[point+2] = qRCodeMatrix.bits.get_Renamed(x,y)?255:0;\n        }\n    }*/\n    if(qrcode.debug)\n        ctx.putImageData(qrcode.imagedata, 0, 0);\n\n    var reader = Decoder.decode(qRCodeMatrix.bits);\n    var data = reader.DataByte;\n    var str=\"\";\n    for(var i=0;i<data.length;i++)\n    {\n        for(var j=0;j<data[i].length;j++)\n            str+=String.fromCharCode(data[i][j]);\n    }\n\n    var end = new Date().getTime();\n    var time = end - start;\n    // console.log(time);\n\n    return qrcode.decode_utf8(str);\n    //alert(\"Time:\" + time + \" Code: \"+str);\n}\n\nqrcode.getPixel = function(x,y){\n    if (qrcode.width < x) {\n        throw \"point error\";\n    }\n    if (qrcode.height < y) {\n        throw \"point error\";\n    }\n    point = (x * 4) + (y * qrcode.width * 4);\n    p = (qrcode.imagedata.data[point]*33 + qrcode.imagedata.data[point + 1]*34 + qrcode.imagedata.data[point + 2]*33)/100;\n    return p;\n}\n\nqrcode.binarize = function(th){\n    var ret = new Array(qrcode.width*qrcode.height);\n    for (var y = 0; y < qrcode.height; y++)\n    {\n        for (var x = 0; x < qrcode.width; x++)\n        {\n            var gray = qrcode.getPixel(x, y);\n\n            ret[x+y*qrcode.width] = gray<=th?true:false;\n        }\n    }\n    return ret;\n}\n\nqrcode.getMiddleBrightnessPerArea=function(image)\n{\n    var numSqrtArea = 4;\n    //obtain middle brightness((min + max) / 2) per area\n    var areaWidth = Math.floor(qrcode.width / numSqrtArea);\n    var areaHeight = Math.floor(qrcode.height / numSqrtArea);\n    var minmax = new Array(numSqrtArea);\n    for (var i = 0; i < numSqrtArea; i++)\n    {\n        minmax[i] = new Array(numSqrtArea);\n        for (var i2 = 0; i2 < numSqrtArea; i2++)\n        {\n            minmax[i][i2] = new Array(0,0);\n        }\n    }\n    for (var ay = 0; ay < numSqrtArea; ay++)\n    {\n        for (var ax = 0; ax < numSqrtArea; ax++)\n        {\n            minmax[ax][ay][0] = 0xFF;\n            for (var dy = 0; dy < areaHeight; dy++)\n            {\n                for (var dx = 0; dx < areaWidth; dx++)\n                {\n                    var target = image[areaWidth * ax + dx+(areaHeight * ay + dy)*qrcode.width];\n                    if (target < minmax[ax][ay][0])\n                        minmax[ax][ay][0] = target;\n                    if (target > minmax[ax][ay][1])\n                        minmax[ax][ay][1] = target;\n                }\n            }\n            //minmax[ax][ay][0] = (minmax[ax][ay][0] + minmax[ax][ay][1]) / 2;\n        }\n    }\n    var middle = new Array(numSqrtArea);\n    for (var i3 = 0; i3 < numSqrtArea; i3++)\n    {\n        middle[i3] = new Array(numSqrtArea);\n    }\n    for (var ay = 0; ay < numSqrtArea; ay++)\n    {\n        for (var ax = 0; ax < numSqrtArea; ax++)\n        {\n            middle[ax][ay] = Math.floor((minmax[ax][ay][0] + minmax[ax][ay][1]) / 2);\n            //Console.out.print(middle[ax][ay] + \",\");\n        }\n        //Console.out.println(\"\");\n    }\n    //Console.out.println(\"\");\n\n    return middle;\n}\n\nqrcode.grayScaleToBitmap=function(grayScale)\n{\n    var middle = qrcode.getMiddleBrightnessPerArea(grayScale);\n    var sqrtNumArea = middle.length;\n    var areaWidth = Math.floor(qrcode.width / sqrtNumArea);\n    var areaHeight = Math.floor(qrcode.height / sqrtNumArea);\n    var bitmap = new Array(qrcode.height*qrcode.width);\n\n    for (var ay = 0; ay < sqrtNumArea; ay++)\n    {\n        for (var ax = 0; ax < sqrtNumArea; ax++)\n        {\n            for (var dy = 0; dy < areaHeight; dy++)\n            {\n                for (var dx = 0; dx < areaWidth; dx++)\n                {\n                    bitmap[areaWidth * ax + dx+ (areaHeight * ay + dy)*qrcode.width] = (grayScale[areaWidth * ax + dx+ (areaHeight * ay + dy)*qrcode.width] < middle[ax][ay])?true:false;\n                }\n            }\n        }\n    }\n    return bitmap;\n}\n\nqrcode.grayscale = function(){\n    var ret = new Array(qrcode.width*qrcode.height);\n    for (var y = 0; y < qrcode.height; y++)\n    {\n        for (var x = 0; x < qrcode.width; x++)\n        {\n            var gray = qrcode.getPixel(x, y);\n\n            ret[x+y*qrcode.width] = gray;\n        }\n    }\n    return ret;\n}\n\n\n\n\nfunction URShift( number,  bits)\n{\n    if (number >= 0)\n        return number >> bits;\n    else\n        return (number >> bits) + (2 << ~bits);\n}\n\n\nArray.prototype.remove = function(from, to) {\n  var rest = this.slice((to || from) + 1 || this.length);\n  this.length = from < 0 ? this.length + from : from;\n  return this.push.apply(this, rest);\n};\n\n/*\n  Ported to JavaScript by Lazar Laszlo 2011\n\n  lazarsoft@gmail.com, www.lazarsoft.info\n\n*/\n\n/*\n*\n* Copyright 2007 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n\nvar MIN_SKIP = 3;\nvar MAX_MODULES = 57;\nvar INTEGER_MATH_SHIFT = 8;\nvar CENTER_QUORUM = 2;\n\nqrcode.orderBestPatterns=function(patterns)\n\t\t{\n\n\t\t\tfunction distance( pattern1,  pattern2)\n\t\t\t{\n\t\t\t\txDiff = pattern1.X - pattern2.X;\n\t\t\t\tyDiff = pattern1.Y - pattern2.Y;\n\t\t\t\treturn  Math.sqrt( (xDiff * xDiff + yDiff * yDiff));\n\t\t\t}\n\n\t\t\t/// <summary> Returns the z component of the cross product between vectors BC and BA.</summary>\n\t\t\tfunction crossProductZ( pointA,  pointB,  pointC)\n\t\t\t{\n\t\t\t\tvar bX = pointB.x;\n\t\t\t\tvar bY = pointB.y;\n\t\t\t\treturn ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));\n\t\t\t}\n\n\n\t\t\t// Find distances between pattern centers\n\t\t\tvar zeroOneDistance = distance(patterns[0], patterns[1]);\n\t\t\tvar oneTwoDistance = distance(patterns[1], patterns[2]);\n\t\t\tvar zeroTwoDistance = distance(patterns[0], patterns[2]);\n\n\t\t\tvar pointA, pointB, pointC;\n\t\t\t// Assume one closest to other two is B; A and C will just be guesses at first\n\t\t\tif (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance)\n\t\t\t{\n\t\t\t\tpointB = patterns[0];\n\t\t\t\tpointA = patterns[1];\n\t\t\t\tpointC = patterns[2];\n\t\t\t}\n\t\t\telse if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance)\n\t\t\t{\n\t\t\t\tpointB = patterns[1];\n\t\t\t\tpointA = patterns[0];\n\t\t\t\tpointC = patterns[2];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpointB = patterns[2];\n\t\t\t\tpointA = patterns[0];\n\t\t\t\tpointC = patterns[1];\n\t\t\t}\n\n\t\t\t// Use cross product to figure out whether A and C are correct or flipped.\n\t\t\t// This asks whether BC x BA has a positive z component, which is the arrangement\n\t\t\t// we want for A, B, C. If it's negative, then we've got it flipped around and\n\t\t\t// should swap A and C.\n\t\t\tif (crossProductZ(pointA, pointB, pointC) < 0.0)\n\t\t\t{\n\t\t\t\tvar temp = pointA;\n\t\t\t\tpointA = pointC;\n\t\t\t\tpointC = temp;\n\t\t\t}\n\n\t\t\tpatterns[0] = pointA;\n\t\t\tpatterns[1] = pointB;\n\t\t\tpatterns[2] = pointC;\n\t\t}\n\n\nfunction FinderPattern(posX, posY,  estimatedModuleSize)\n{\n\tthis.x=posX;\n\tthis.y=posY;\n\tthis.count = 1;\n\tthis.estimatedModuleSize = estimatedModuleSize;\n\n\tthis.__defineGetter__(\"EstimatedModuleSize\", function()\n\t{\n\t\treturn this.estimatedModuleSize;\n\t});\n\tthis.__defineGetter__(\"Count\", function()\n\t{\n\t\treturn this.count;\n\t});\n\tthis.__defineGetter__(\"X\", function()\n\t{\n\t\treturn this.x;\n\t});\n\tthis.__defineGetter__(\"Y\", function()\n\t{\n\t\treturn this.y;\n\t});\n\tthis.incrementCount = function()\n\t{\n\t\tthis.count++;\n\t}\n\tthis.aboutEquals=function( moduleSize,  i,  j)\n\t\t{\n\t\t\tif (Math.abs(i - this.y) <= moduleSize && Math.abs(j - this.x) <= moduleSize)\n\t\t\t{\n\t\t\t\tvar moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\n\t\t\t\treturn moduleSizeDiff <= 1.0 || moduleSizeDiff / this.estimatedModuleSize <= 1.0;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n}\n\nfunction FinderPatternInfo(patternCenters)\n{\n\tthis.bottomLeft = patternCenters[0];\n\tthis.topLeft = patternCenters[1];\n\tthis.topRight = patternCenters[2];\n\tthis.__defineGetter__(\"BottomLeft\", function()\n\t{\n\t\treturn this.bottomLeft;\n\t});\n\tthis.__defineGetter__(\"TopLeft\", function()\n\t{\n\t\treturn this.topLeft;\n\t});\n\tthis.__defineGetter__(\"TopRight\", function()\n\t{\n\t\treturn this.topRight;\n\t});\n}\n\nfunction FinderPatternFinder()\n{\n\tthis.image=null;\n\tthis.possibleCenters = [];\n\tthis.hasSkipped = false;\n\tthis.crossCheckStateCount = new Array(0,0,0,0,0);\n\tthis.resultPointCallback = null;\n\n\tthis.__defineGetter__(\"CrossCheckStateCount\", function()\n\t{\n\t\tthis.crossCheckStateCount[0] = 0;\n\t\tthis.crossCheckStateCount[1] = 0;\n\t\tthis.crossCheckStateCount[2] = 0;\n\t\tthis.crossCheckStateCount[3] = 0;\n\t\tthis.crossCheckStateCount[4] = 0;\n\t\treturn this.crossCheckStateCount;\n\t});\n\n\tthis.foundPatternCross=function( stateCount)\n\t\t{\n\t\t\tvar totalModuleSize = 0;\n\t\t\tfor (var i = 0; i < 5; i++)\n\t\t\t{\n\t\t\t\tvar count = stateCount[i];\n\t\t\t\tif (count == 0)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\ttotalModuleSize += count;\n\t\t\t}\n\t\t\tif (totalModuleSize < 7)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar moduleSize = Math.floor((totalModuleSize << INTEGER_MATH_SHIFT) / 7);\n\t\t\tvar maxVariance = Math.floor(moduleSize / 2);\n\t\t\t// Allow less than 50% variance from 1-1-3-1-1 proportions\n\t\t\treturn Math.abs(moduleSize - (stateCount[0] << INTEGER_MATH_SHIFT)) < maxVariance && Math.abs(moduleSize - (stateCount[1] << INTEGER_MATH_SHIFT)) < maxVariance && Math.abs(3 * moduleSize - (stateCount[2] << INTEGER_MATH_SHIFT)) < 3 * maxVariance && Math.abs(moduleSize - (stateCount[3] << INTEGER_MATH_SHIFT)) < maxVariance && Math.abs(moduleSize - (stateCount[4] << INTEGER_MATH_SHIFT)) < maxVariance;\n\t\t}\n\tthis.centerFromEnd=function( stateCount,  end)\n\t\t{\n\t\t\treturn  (end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0;\n\t\t}\n\tthis.crossCheckVertical=function( startI,  centerJ,  maxCount,  originalStateCountTotal)\n\t\t{\n\t\t\tvar image = this.image;\n\n\t\t\tvar maxI = qrcode.height;\n\t\t\tvar stateCount = this.CrossCheckStateCount;\n\n\t\t\t// Start counting up from center\n\t\t\tvar i = startI;\n\t\t\twhile (i >= 0 && image[centerJ + i*qrcode.width])\n\t\t\t{\n\t\t\t\tstateCount[2]++;\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (i < 0)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\twhile (i >= 0 && !image[centerJ +i*qrcode.width] && stateCount[1] <= maxCount)\n\t\t\t{\n\t\t\t\tstateCount[1]++;\n\t\t\t\ti--;\n\t\t\t}\n\t\t\t// If already too many modules in this state or ran off the edge:\n\t\t\tif (i < 0 || stateCount[1] > maxCount)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\twhile (i >= 0 && image[centerJ + i*qrcode.width] && stateCount[0] <= maxCount)\n\t\t\t{\n\t\t\t\tstateCount[0]++;\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (stateCount[0] > maxCount)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\n\t\t\t// Now also count down from center\n\t\t\ti = startI + 1;\n\t\t\twhile (i < maxI && image[centerJ +i*qrcode.width])\n\t\t\t{\n\t\t\t\tstateCount[2]++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (i == maxI)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\twhile (i < maxI && !image[centerJ + i*qrcode.width] && stateCount[3] < maxCount)\n\t\t\t{\n\t\t\t\tstateCount[3]++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (i == maxI || stateCount[3] >= maxCount)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\twhile (i < maxI && image[centerJ + i*qrcode.width] && stateCount[4] < maxCount)\n\t\t\t{\n\t\t\t\tstateCount[4]++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (stateCount[4] >= maxCount)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\n\t\t\t// If we found a finder-pattern-like section, but its size is more than 40% different than\n\t\t\t// the original, assume it's a false positive\n\t\t\tvar stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n\t\t\tif (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\n\t\t\treturn this.foundPatternCross(stateCount)?this.centerFromEnd(stateCount, i):NaN;\n\t\t}\n\tthis.crossCheckHorizontal=function( startJ,  centerI,  maxCount, originalStateCountTotal)\n\t\t{\n\t\t\tvar image = this.image;\n\n\t\t\tvar maxJ = qrcode.width;\n\t\t\tvar stateCount = this.CrossCheckStateCount;\n\n\t\t\tvar j = startJ;\n\t\t\twhile (j >= 0 && image[j+ centerI*qrcode.width])\n\t\t\t{\n\t\t\t\tstateCount[2]++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (j < 0)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\twhile (j >= 0 && !image[j+ centerI*qrcode.width] && stateCount[1] <= maxCount)\n\t\t\t{\n\t\t\t\tstateCount[1]++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (j < 0 || stateCount[1] > maxCount)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\twhile (j >= 0 && image[j+ centerI*qrcode.width] && stateCount[0] <= maxCount)\n\t\t\t{\n\t\t\t\tstateCount[0]++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (stateCount[0] > maxCount)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\n\t\t\tj = startJ + 1;\n\t\t\twhile (j < maxJ && image[j+ centerI*qrcode.width])\n\t\t\t{\n\t\t\t\tstateCount[2]++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == maxJ)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\twhile (j < maxJ && !image[j+ centerI*qrcode.width] && stateCount[3] < maxCount)\n\t\t\t{\n\t\t\t\tstateCount[3]++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == maxJ || stateCount[3] >= maxCount)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\twhile (j < maxJ && image[j+ centerI*qrcode.width] && stateCount[4] < maxCount)\n\t\t\t{\n\t\t\t\tstateCount[4]++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (stateCount[4] >= maxCount)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\n\t\t\t// If we found a finder-pattern-like section, but its size is significantly different than\n\t\t\t// the original, assume it's a false positive\n\t\t\tvar stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n\t\t\tif (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal)\n\t\t\t{\n\t\t\t\treturn NaN;\n\t\t\t}\n\n\t\t\treturn this.foundPatternCross(stateCount)?this.centerFromEnd(stateCount, j):NaN;\n\t\t}\n\tthis.handlePossibleCenter=function( stateCount,  i,  j)\n\t\t{\n\t\t\tvar stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n\t\t\tvar centerJ = this.centerFromEnd(stateCount, j); //float\n\t\t\tvar centerI = this.crossCheckVertical(i, Math.floor( centerJ), stateCount[2], stateCountTotal); //float\n\t\t\tif (!isNaN(centerI))\n\t\t\t{\n\t\t\t\t// Re-cross check\n\t\t\t\tcenterJ = this.crossCheckHorizontal(Math.floor( centerJ), Math.floor( centerI), stateCount[2], stateCountTotal);\n\t\t\t\tif (!isNaN(centerJ))\n\t\t\t\t{\n\t\t\t\t\tvar estimatedModuleSize =   stateCountTotal / 7.0;\n\t\t\t\t\tvar found = false;\n\t\t\t\t\tvar max = this.possibleCenters.length;\n\t\t\t\t\tfor (var index = 0; index < max; index++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar center = this.possibleCenters[index];\n\t\t\t\t\t\t// Look for about the same center and module size:\n\t\t\t\t\t\tif (center.aboutEquals(estimatedModuleSize, centerI, centerJ))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcenter.incrementCount();\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!found)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar point = new FinderPattern(centerJ, centerI, estimatedModuleSize);\n\t\t\t\t\t\tthis.possibleCenters.push(point);\n\t\t\t\t\t\tif (this.resultPointCallback != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.resultPointCallback.foundPossibleResultPoint(point);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\tthis.selectBestPatterns=function()\n\t\t{\n\n\t\t\tvar startSize = this.possibleCenters.length;\n\t\t\tif (startSize < 3)\n\t\t\t{\n\t\t\t\t// Couldn't find enough finder patterns\n\t\t\t\tthrow \"Couldn't find enough finder patterns\";\n\t\t\t}\n\n\t\t\t// Filter outlier possibilities whose module size is too different\n\t\t\tif (startSize > 3)\n\t\t\t{\n\t\t\t\t// But we can only afford to do so if we have at least 4 possibilities to choose from\n\t\t\t\tvar totalModuleSize = 0.0;\n                var square = 0.0;\n\t\t\t\tfor (var i = 0; i < startSize; i++)\n\t\t\t\t{\n\t\t\t\t\t//totalModuleSize +=  this.possibleCenters[i].EstimatedModuleSize;\n                    var\tcenterValue=this.possibleCenters[i].EstimatedModuleSize;\n\t\t\t\t\ttotalModuleSize += centerValue;\n\t\t\t\t\tsquare += (centerValue * centerValue);\n\t\t\t\t}\n\t\t\t\tvar average = totalModuleSize /  startSize;\n                this.possibleCenters.sort(function(center1,center2) {\n\t\t\t\t      var dA=Math.abs(center2.EstimatedModuleSize - average);\n\t\t\t\t      var dB=Math.abs(center1.EstimatedModuleSize - average);\n\t\t\t\t      if (dA < dB) {\n\t\t\t\t    \t  return (-1);\n\t\t\t\t      } else if (dA == dB) {\n\t\t\t\t    \t  return 0;\n\t\t\t\t      } else {\n\t\t\t\t    \t  return 1;\n\t\t\t\t      }\n\t\t\t\t\t});\n\n\t\t\t\tvar stdDev = Math.sqrt(square / startSize - average * average);\n\t\t\t\tvar limit = Math.max(0.2 * average, stdDev);\n\t\t\t\tfor (var i = 0; i < this.possibleCenters.length && this.possibleCenters.length > 3; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pattern =  this.possibleCenters[i];\n\t\t\t\t\t//if (Math.abs(pattern.EstimatedModuleSize - average) > 0.2 * average)\n                    if (Math.abs(pattern.EstimatedModuleSize - average) > limit)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.possibleCenters.remove(i);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.possibleCenters.length > 3)\n\t\t\t{\n\t\t\t\t// Throw away all but those first size candidate points we found.\n\t\t\t\tthis.possibleCenters.sort(function(a, b){\n\t\t\t\t\tif (a.count > b.count){return -1;}\n\t\t\t\t\tif (a.count < b.count){return 1;}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn new Array( this.possibleCenters[0],  this.possibleCenters[1],  this.possibleCenters[2]);\n\t\t}\n\n\tthis.findRowSkip=function()\n\t\t{\n\t\t\tvar max = this.possibleCenters.length;\n\t\t\tif (max <= 1)\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tvar firstConfirmedCenter = null;\n\t\t\tfor (var i = 0; i < max; i++)\n\t\t\t{\n\t\t\t\tvar center =  this.possibleCenters[i];\n\t\t\t\tif (center.Count >= CENTER_QUORUM)\n\t\t\t\t{\n\t\t\t\t\tif (firstConfirmedCenter == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfirstConfirmedCenter = center;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// We have two confirmed centers\n\t\t\t\t\t\t// How far down can we skip before resuming looking for the next\n\t\t\t\t\t\t// pattern? In the worst case, only the difference between the\n\t\t\t\t\t\t// difference in the x / y coordinates of the two centers.\n\t\t\t\t\t\t// This is the case where you find top left last.\n\t\t\t\t\t\tthis.hasSkipped = true;\n\t\t\t\t\t\treturn Math.floor ((Math.abs(firstConfirmedCenter.X - center.X) - Math.abs(firstConfirmedCenter.Y - center.Y)) / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\n\tthis.haveMultiplyConfirmedCenters=function()\n\t\t{\n\t\t\tvar confirmedCount = 0;\n\t\t\tvar totalModuleSize = 0.0;\n\t\t\tvar max = this.possibleCenters.length;\n\t\t\tfor (var i = 0; i < max; i++)\n\t\t\t{\n\t\t\t\tvar pattern =  this.possibleCenters[i];\n\t\t\t\tif (pattern.Count >= CENTER_QUORUM)\n\t\t\t\t{\n\t\t\t\t\tconfirmedCount++;\n\t\t\t\t\ttotalModuleSize += pattern.EstimatedModuleSize;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (confirmedCount < 3)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// OK, we have at least 3 confirmed centers, but, it's possible that one is a \"false positive\"\n\t\t\t// and that we need to keep looking. We detect this by asking if the estimated module sizes\n\t\t\t// vary too much. We arbitrarily say that when the total deviation from average exceeds\n\t\t\t// 5% of the total module size estimates, it's too much.\n\t\t\tvar average = totalModuleSize / max;\n\t\t\tvar totalDeviation = 0.0;\n\t\t\tfor (var i = 0; i < max; i++)\n\t\t\t{\n\t\t\t\tpattern = this.possibleCenters[i];\n\t\t\t\ttotalDeviation += Math.abs(pattern.EstimatedModuleSize - average);\n\t\t\t}\n\t\t\treturn totalDeviation <= 0.05 * totalModuleSize;\n\t\t}\n\n\tthis.findFinderPattern = function(image){\n\t\tvar tryHarder = false;\n\t\tthis.image=image;\n\t\tvar maxI = qrcode.height;\n\t\tvar maxJ = qrcode.width;\n\t\tvar iSkip = Math.floor((3 * maxI) / (4 * MAX_MODULES));\n\t\tif (iSkip < MIN_SKIP || tryHarder)\n\t\t{\n\t\t\t\tiSkip = MIN_SKIP;\n\t\t}\n\n\t\tvar done = false;\n\t\tvar stateCount = new Array(5);\n\t\tfor (var i = iSkip - 1; i < maxI && !done; i += iSkip)\n\t\t{\n\t\t\t// Get a row of black/white values\n\t\t\tstateCount[0] = 0;\n\t\t\tstateCount[1] = 0;\n\t\t\tstateCount[2] = 0;\n\t\t\tstateCount[3] = 0;\n\t\t\tstateCount[4] = 0;\n\t\t\tvar currentState = 0;\n\t\t\tfor (var j = 0; j < maxJ; j++)\n\t\t\t{\n\t\t\t\tif (image[j+i*qrcode.width] )\n\t\t\t\t{\n\t\t\t\t\t// Black pixel\n\t\t\t\t\tif ((currentState & 1) == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Counting white pixels\n\t\t\t\t\t\tcurrentState++;\n\t\t\t\t\t}\n\t\t\t\t\tstateCount[currentState]++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// White pixel\n\t\t\t\t\tif ((currentState & 1) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Counting black pixels\n\t\t\t\t\t\tif (currentState == 4)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// A winner?\n\t\t\t\t\t\t\tif (this.foundPatternCross(stateCount))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Yes\n\t\t\t\t\t\t\t\tvar confirmed = this.handlePossibleCenter(stateCount, i, j);\n\t\t\t\t\t\t\t\tif (confirmed)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Start examining every other line. Checking each line turned out to be too\n\t\t\t\t\t\t\t\t\t// expensive and didn't improve performance.\n\t\t\t\t\t\t\t\t\tiSkip = 2;\n\t\t\t\t\t\t\t\t\tif (this.hasSkipped)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdone = this.haveMultiplyConfirmedCenters();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar rowSkip = this.findRowSkip();\n\t\t\t\t\t\t\t\t\t\tif (rowSkip > stateCount[2])\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t// Skip rows between row of lower confirmed center\n\t\t\t\t\t\t\t\t\t\t\t// and top of presumed third confirmed center\n\t\t\t\t\t\t\t\t\t\t\t// but back up a bit to get a full chance of detecting\n\t\t\t\t\t\t\t\t\t\t\t// it, entire width of center of finder pattern\n\n\t\t\t\t\t\t\t\t\t\t\t// Skip by rowSkip, but back off by stateCount[2] (size of last center\n\t\t\t\t\t\t\t\t\t\t\t// of pattern we saw) to be conservative, and also back off by iSkip which\n\t\t\t\t\t\t\t\t\t\t\t// is about to be re-added\n\t\t\t\t\t\t\t\t\t\t\ti += rowSkip - stateCount[2] - iSkip;\n\t\t\t\t\t\t\t\t\t\t\tj = maxJ - 1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Advance to next black pixel\n\t\t\t\t\t\t\t\t\tdo\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tj++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\twhile (j < maxJ && !image[j + i*qrcode.width]);\n\t\t\t\t\t\t\t\t\tj--; // back up to that last white pixel\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Clear state to start looking again\n\t\t\t\t\t\t\t\tcurrentState = 0;\n\t\t\t\t\t\t\t\tstateCount[0] = 0;\n\t\t\t\t\t\t\t\tstateCount[1] = 0;\n\t\t\t\t\t\t\t\tstateCount[2] = 0;\n\t\t\t\t\t\t\t\tstateCount[3] = 0;\n\t\t\t\t\t\t\t\tstateCount[4] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// No, shift counts back by two\n\t\t\t\t\t\t\t\tstateCount[0] = stateCount[2];\n\t\t\t\t\t\t\t\tstateCount[1] = stateCount[3];\n\t\t\t\t\t\t\t\tstateCount[2] = stateCount[4];\n\t\t\t\t\t\t\t\tstateCount[3] = 1;\n\t\t\t\t\t\t\t\tstateCount[4] = 0;\n\t\t\t\t\t\t\t\tcurrentState = 3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstateCount[++currentState]++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Counting white pixels\n\t\t\t\t\t\tstateCount[currentState]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.foundPatternCross(stateCount))\n\t\t\t{\n\t\t\t\tvar confirmed = this.handlePossibleCenter(stateCount, i, maxJ);\n\t\t\t\tif (confirmed)\n\t\t\t\t{\n\t\t\t\t\tiSkip = stateCount[0];\n\t\t\t\t\tif (this.hasSkipped)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Found a third one\n\t\t\t\t\t\tdone = haveMultiplyConfirmedCenters();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar patternInfo = this.selectBestPatterns();\n\t\tqrcode.orderBestPatterns(patternInfo);\n\n\t\treturn new FinderPatternInfo(patternInfo);\n\t};\n}\n\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction AlignmentPattern(posX, posY,  estimatedModuleSize)\r\n{\r\n\tthis.x=posX;\r\n\tthis.y=posY;\r\n\tthis.count = 1;\r\n\tthis.estimatedModuleSize = estimatedModuleSize;\r\n\t\r\n\tthis.__defineGetter__(\"EstimatedModuleSize\", function()\r\n\t{\r\n\t\treturn this.estimatedModuleSize;\r\n\t}); \r\n\tthis.__defineGetter__(\"Count\", function()\r\n\t{\r\n\t\treturn this.count;\r\n\t});\r\n\tthis.__defineGetter__(\"X\", function()\r\n\t{\r\n\t\treturn Math.floor(this.x);\r\n\t});\r\n\tthis.__defineGetter__(\"Y\", function()\r\n\t{\r\n\t\treturn Math.floor(this.y);\r\n\t});\r\n\tthis.incrementCount = function()\r\n\t{\r\n\t\tthis.count++;\r\n\t}\r\n\tthis.aboutEquals=function( moduleSize,  i,  j)\r\n\t\t{\r\n\t\t\tif (Math.abs(i - this.y) <= moduleSize && Math.abs(j - this.x) <= moduleSize)\r\n\t\t\t{\r\n\t\t\t\tvar moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\r\n\t\t\t\treturn moduleSizeDiff <= 1.0 || moduleSizeDiff / this.estimatedModuleSize <= 1.0;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\r\n}\r\n\r\nfunction AlignmentPatternFinder( image,  startX,  startY,  width,  height,  moduleSize,  resultPointCallback)\r\n{\r\n\tthis.image = image;\r\n\tthis.possibleCenters = new Array();\r\n\tthis.startX = startX;\r\n\tthis.startY = startY;\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\tthis.moduleSize = moduleSize;\r\n\tthis.crossCheckStateCount = new Array(0,0,0);\r\n\tthis.resultPointCallback = resultPointCallback;\r\n\t\r\n\tthis.centerFromEnd=function(stateCount,  end)\r\n\t\t{\r\n\t\t\treturn  (end - stateCount[2]) - stateCount[1] / 2.0;\r\n\t\t}\r\n\tthis.foundPatternCross = function(stateCount)\r\n\t\t{\r\n\t\t\tvar moduleSize = this.moduleSize;\r\n\t\t\tvar maxVariance = moduleSize / 2.0;\r\n\t\t\tfor (var i = 0; i < 3; i++)\r\n\t\t\t{\r\n\t\t\t\tif (Math.abs(moduleSize - stateCount[i]) >= maxVariance)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\tthis.crossCheckVertical=function( startI,  centerJ,  maxCount,  originalStateCountTotal)\r\n\t\t{\r\n\t\t\tvar image = this.image;\r\n\t\t\t\r\n\t\t\tvar maxI = qrcode.height;\r\n\t\t\tvar stateCount = this.crossCheckStateCount;\r\n\t\t\tstateCount[0] = 0;\r\n\t\t\tstateCount[1] = 0;\r\n\t\t\tstateCount[2] = 0;\r\n\t\t\t\r\n\t\t\t// Start counting up from center\r\n\t\t\tvar i = startI;\r\n\t\t\twhile (i >= 0 && image[centerJ + i*qrcode.width] && stateCount[1] <= maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[1]++;\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t\t// If already too many modules in this state or ran off the edge:\r\n\t\t\tif (i < 0 || stateCount[1] > maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\twhile (i >= 0 && !image[centerJ + i*qrcode.width] && stateCount[0] <= maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[0]++;\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t\tif (stateCount[0] > maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Now also count down from center\r\n\t\t\ti = startI + 1;\r\n\t\t\twhile (i < maxI && image[centerJ + i*qrcode.width] && stateCount[1] <= maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[1]++;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tif (i == maxI || stateCount[1] > maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\twhile (i < maxI && !image[centerJ + i*qrcode.width] && stateCount[2] <= maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[2]++;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tif (stateCount[2] > maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\r\n\t\t\tif (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this.foundPatternCross(stateCount)?this.centerFromEnd(stateCount, i):NaN;\r\n\t\t}\r\n\t\t\r\n\tthis.handlePossibleCenter=function( stateCount,  i,  j)\r\n\t\t{\r\n\t\t\tvar stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\r\n\t\t\tvar centerJ = this.centerFromEnd(stateCount, j);\r\n\t\t\tvar centerI = this.crossCheckVertical(i, Math.floor (centerJ), 2 * stateCount[1], stateCountTotal);\r\n\t\t\tif (!isNaN(centerI))\r\n\t\t\t{\r\n\t\t\t\tvar estimatedModuleSize = (stateCount[0] + stateCount[1] + stateCount[2]) / 3.0;\r\n\t\t\t\tvar max = this.possibleCenters.length;\r\n\t\t\t\tfor (var index = 0; index < max; index++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar center =  this.possibleCenters[index];\r\n\t\t\t\t\t// Look for about the same center and module size:\r\n\t\t\t\t\tif (center.aboutEquals(estimatedModuleSize, centerI, centerJ))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn new AlignmentPattern(centerJ, centerI, estimatedModuleSize);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Hadn't found this before; save it\r\n\t\t\t\tvar point = new AlignmentPattern(centerJ, centerI, estimatedModuleSize);\r\n\t\t\t\tthis.possibleCenters.push(point);\r\n\t\t\t\tif (this.resultPointCallback != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.resultPointCallback.foundPossibleResultPoint(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\tthis.find = function()\r\n\t{\r\n\t\t\tvar startX = this.startX;\r\n\t\t\tvar height = this.height;\r\n\t\t\tvar maxJ = startX + width;\r\n\t\t\tvar middleI = startY + (height >> 1);\r\n\t\t\t// We are looking for black/white/black modules in 1:1:1 ratio;\r\n\t\t\t// this tracks the number of black/white/black modules seen so far\r\n\t\t\tvar stateCount = new Array(0,0,0);\r\n\t\t\tfor (var iGen = 0; iGen < height; iGen++)\r\n\t\t\t{\r\n\t\t\t\t// Search from middle outwards\r\n\t\t\t\tvar i = middleI + ((iGen & 0x01) == 0?((iGen + 1) >> 1):- ((iGen + 1) >> 1));\r\n\t\t\t\tstateCount[0] = 0;\r\n\t\t\t\tstateCount[1] = 0;\r\n\t\t\t\tstateCount[2] = 0;\r\n\t\t\t\tvar j = startX;\r\n\t\t\t\t// Burn off leading white pixels before anything else; if we start in the middle of\r\n\t\t\t\t// a white run, it doesn't make sense to count its length, since we don't know if the\r\n\t\t\t\t// white run continued to the left of the start point\r\n\t\t\t\twhile (j < maxJ && !image[j + qrcode.width* i])\r\n\t\t\t\t{\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}\r\n\t\t\t\tvar currentState = 0;\r\n\t\t\t\twhile (j < maxJ)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (image[j + i*qrcode.width])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Black pixel\r\n\t\t\t\t\t\tif (currentState == 1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Counting black pixels\r\n\t\t\t\t\t\t\tstateCount[currentState]++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Counting white pixels\r\n\t\t\t\t\t\t\tif (currentState == 2)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// A winner?\r\n\t\t\t\t\t\t\t\tif (this.foundPatternCross(stateCount))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Yes\r\n\t\t\t\t\t\t\t\t\tvar confirmed = this.handlePossibleCenter(stateCount, i, j);\r\n\t\t\t\t\t\t\t\t\tif (confirmed != null)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn confirmed;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstateCount[0] = stateCount[2];\r\n\t\t\t\t\t\t\t\tstateCount[1] = 1;\r\n\t\t\t\t\t\t\t\tstateCount[2] = 0;\r\n\t\t\t\t\t\t\t\tcurrentState = 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tstateCount[++currentState]++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// White pixel\r\n\t\t\t\t\t\tif (currentState == 1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Counting black pixels\r\n\t\t\t\t\t\t\tcurrentState++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tstateCount[currentState]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.foundPatternCross(stateCount))\r\n\t\t\t\t{\r\n\t\t\t\t\tvar confirmed = this.handlePossibleCenter(stateCount, i, maxJ);\r\n\t\t\t\t\tif (confirmed != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn confirmed;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Hmm, nothing we saw was observed and confirmed twice. If we had\r\n\t\t\t// any guess at all, return it.\r\n\t\t\tif (!(this.possibleCenters.length == 0))\r\n\t\t\t{\r\n\t\t\t\treturn  this.possibleCenters[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthrow \"Couldn't find enough alignment patterns\";\r\n\t\t}\r\n\t\r\n}\n/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction QRCodeDataBlockReader(blocks,  version,  numErrorCorrectionCode)\r\n{\r\n\tthis.blockPointer = 0;\r\n\tthis.bitPointer = 7;\r\n\tthis.dataLength = 0;\r\n\tthis.blocks = blocks;\r\n\tthis.numErrorCorrectionCode = numErrorCorrectionCode;\r\n\tif (version <= 9)\r\n\t\tthis.dataLengthMode = 0;\r\n\telse if (version >= 10 && version <= 26)\r\n\t\tthis.dataLengthMode = 1;\r\n\telse if (version >= 27 && version <= 40)\r\n\t\tthis.dataLengthMode = 2;\r\n\t\t\r\n\tthis.getNextBits = function( numBits)\r\n\t\t{\t\t\t\r\n\t\t\tvar bits = 0;\r\n\t\t\tif (numBits < this.bitPointer + 1)\r\n\t\t\t{\r\n\t\t\t\t// next word fits into current data block\r\n\t\t\t\tvar mask = 0;\r\n\t\t\t\tfor (var i = 0; i < numBits; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tmask += (1 << i);\r\n\t\t\t\t}\r\n\t\t\t\tmask <<= (this.bitPointer - numBits + 1);\r\n\t\t\t\t\r\n\t\t\t\tbits = (this.blocks[this.blockPointer] & mask) >> (this.bitPointer - numBits + 1);\r\n\t\t\t\tthis.bitPointer -= numBits;\r\n\t\t\t\treturn bits;\r\n\t\t\t}\r\n\t\t\telse if (numBits < this.bitPointer + 1 + 8)\r\n\t\t\t{\r\n\t\t\t\t// next word crosses 2 data blocks\r\n\t\t\t\tvar mask1 = 0;\r\n\t\t\t\tfor (var i = 0; i < this.bitPointer + 1; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tmask1 += (1 << i);\r\n\t\t\t\t}\r\n\t\t\t\tbits = (this.blocks[this.blockPointer] & mask1) << (numBits - (this.bitPointer + 1));\r\n                this.blockPointer++;\r\n\t\t\t\tbits += ((this.blocks[this.blockPointer]) >> (8 - (numBits - (this.bitPointer + 1))));\r\n\t\t\t\t\r\n\t\t\t\tthis.bitPointer = this.bitPointer - numBits % 8;\r\n\t\t\t\tif (this.bitPointer < 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.bitPointer = 8 + this.bitPointer;\r\n\t\t\t\t}\r\n\t\t\t\treturn bits;\r\n\t\t\t}\r\n\t\t\telse if (numBits < this.bitPointer + 1 + 16)\r\n\t\t\t{\r\n\t\t\t\t// next word crosses 3 data blocks\r\n\t\t\t\tvar mask1 = 0; // mask of first block\r\n\t\t\t\tvar mask3 = 0; // mask of 3rd block\r\n\t\t\t\t//bitPointer + 1 : number of bits of the 1st block\r\n\t\t\t\t//8 : number of the 2nd block (note that use already 8bits because next word uses 3 data blocks)\r\n\t\t\t\t//numBits - (bitPointer + 1 + 8) : number of bits of the 3rd block \r\n\t\t\t\tfor (var i = 0; i < this.bitPointer + 1; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tmask1 += (1 << i);\r\n\t\t\t\t}\r\n\t\t\t\tvar bitsFirstBlock = (this.blocks[this.blockPointer] & mask1) << (numBits - (this.bitPointer + 1));\r\n\t\t\t\tthis.blockPointer++;\r\n\t\t\t\t\r\n\t\t\t\tvar bitsSecondBlock = this.blocks[this.blockPointer] << (numBits - (this.bitPointer + 1 + 8));\r\n\t\t\t\tthis.blockPointer++;\r\n\t\t\t\t\r\n\t\t\t\tfor (var i = 0; i < numBits - (this.bitPointer + 1 + 8); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tmask3 += (1 << i);\r\n\t\t\t\t}\r\n\t\t\t\tmask3 <<= 8 - (numBits - (this.bitPointer + 1 + 8));\r\n\t\t\t\tvar bitsThirdBlock = (this.blocks[this.blockPointer] & mask3) >> (8 - (numBits - (this.bitPointer + 1 + 8)));\r\n\t\t\t\t\r\n\t\t\t\tbits = bitsFirstBlock + bitsSecondBlock + bitsThirdBlock;\r\n\t\t\t\tthis.bitPointer = this.bitPointer - (numBits - 8) % 8;\r\n\t\t\t\tif (this.bitPointer < 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.bitPointer = 8 + this.bitPointer;\r\n\t\t\t\t}\r\n\t\t\t\treturn bits;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t}\r\n\tthis.NextMode=function()\r\n\t{\r\n\t\tif ((this.blockPointer > this.blocks.length - this.numErrorCorrectionCode - 2))\r\n\t\t\treturn 0;\r\n\t\telse\r\n\t\t\treturn this.getNextBits(4);\r\n\t}\r\n\tthis.getDataLength=function( modeIndicator)\r\n\t\t{\r\n\t\t\tvar index = 0;\r\n\t\t\twhile (true)\r\n\t\t\t{\r\n\t\t\t\tif ((modeIndicator >> index) == 1)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this.getNextBits(qrcode.sizeOfDataLengthInfo[this.dataLengthMode][index]);\r\n\t\t}\r\n\tthis.getRomanAndFigureString=function( dataLength)\r\n\t\t{\r\n\t\t\tvar length = dataLength;\r\n\t\t\tvar intData = 0;\r\n\t\t\tvar strData = \"\";\r\n\t\t\tvar tableRomanAndFigure = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':');\r\n\t\t\tdo \r\n\t\t\t{\r\n\t\t\t\tif (length > 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tintData = this.getNextBits(11);\r\n\t\t\t\t\tvar firstLetter = Math.floor(intData / 45);\r\n\t\t\t\t\tvar secondLetter = intData % 45;\r\n\t\t\t\t\tstrData += tableRomanAndFigure[firstLetter];\r\n\t\t\t\t\tstrData += tableRomanAndFigure[secondLetter];\r\n\t\t\t\t\tlength -= 2;\r\n\t\t\t\t}\r\n\t\t\t\telse if (length == 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tintData = this.getNextBits(6);\r\n\t\t\t\t\tstrData += tableRomanAndFigure[intData];\r\n\t\t\t\t\tlength -= 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twhile (length > 0);\r\n\t\t\t\r\n\t\t\treturn strData;\r\n\t\t}\r\n\tthis.getFigureString=function( dataLength)\r\n\t\t{\r\n\t\t\tvar length = dataLength;\r\n\t\t\tvar intData = 0;\r\n\t\t\tvar strData = \"\";\r\n\t\t\tdo \r\n\t\t\t{\r\n\t\t\t\tif (length >= 3)\r\n\t\t\t\t{\r\n\t\t\t\t\tintData = this.getNextBits(10);\r\n\t\t\t\t\tif (intData < 100)\r\n\t\t\t\t\t\tstrData += \"0\";\r\n\t\t\t\t\tif (intData < 10)\r\n\t\t\t\t\t\tstrData += \"0\";\r\n\t\t\t\t\tlength -= 3;\r\n\t\t\t\t}\r\n\t\t\t\telse if (length == 2)\r\n\t\t\t\t{\r\n\t\t\t\t\tintData = this.getNextBits(7);\r\n\t\t\t\t\tif (intData < 10)\r\n\t\t\t\t\t\tstrData += \"0\";\r\n\t\t\t\t\tlength -= 2;\r\n\t\t\t\t}\r\n\t\t\t\telse if (length == 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tintData = this.getNextBits(4);\r\n\t\t\t\t\tlength -= 1;\r\n\t\t\t\t}\r\n\t\t\t\tstrData += intData;\r\n\t\t\t}\r\n\t\t\twhile (length > 0);\r\n\t\t\t\r\n\t\t\treturn strData;\r\n\t\t}\r\n\tthis.get8bitByteArray=function( dataLength)\r\n\t\t{\r\n\t\t\tvar length = dataLength;\r\n\t\t\tvar intData = 0;\r\n\t\t\tvar output = new Array();\r\n\t\t\t\r\n\t\t\tdo \r\n\t\t\t{\r\n\t\t\t\tintData = this.getNextBits(8);\r\n\t\t\t\toutput.push( intData);\r\n\t\t\t\tlength--;\r\n\t\t\t}\r\n\t\t\twhile (length > 0);\r\n\t\t\treturn output;\r\n\t\t}\r\n    this.getKanjiString=function( dataLength)\r\n\t\t{\r\n\t\t\tvar length = dataLength;\r\n\t\t\tvar intData = 0;\r\n\t\t\tvar unicodeString = \"\";\r\n\t\t\tdo \r\n\t\t\t{\r\n\t\t\t\tintData = getNextBits(13);\r\n\t\t\t\tvar lowerByte = intData % 0xC0;\r\n\t\t\t\tvar higherByte = intData / 0xC0;\r\n\t\t\t\t\r\n\t\t\t\tvar tempWord = (higherByte << 8) + lowerByte;\r\n\t\t\t\tvar shiftjisWord = 0;\r\n\t\t\t\tif (tempWord + 0x8140 <= 0x9FFC)\r\n\t\t\t\t{\r\n\t\t\t\t\t// between 8140 - 9FFC on Shift_JIS character set\r\n\t\t\t\t\tshiftjisWord = tempWord + 0x8140;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// between E040 - EBBF on Shift_JIS character set\r\n\t\t\t\t\tshiftjisWord = tempWord + 0xC140;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//var tempByte = new Array(0,0);\r\n\t\t\t\t//tempByte[0] = (sbyte) (shiftjisWord >> 8);\r\n\t\t\t\t//tempByte[1] = (sbyte) (shiftjisWord & 0xFF);\r\n\t\t\t\t//unicodeString += new String(SystemUtils.ToCharArray(SystemUtils.ToByteArray(tempByte)));\r\n                unicodeString += String.fromCharCode(shiftjisWord);\r\n\t\t\t\tlength--;\r\n\t\t\t}\r\n\t\t\twhile (length > 0);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\treturn unicodeString;\r\n\t\t}\r\n\r\n\tthis.__defineGetter__(\"DataByte\", function()\r\n\t{\r\n\t\tvar output = new Array();\r\n\t\tvar MODE_NUMBER = 1;\r\n\t    var MODE_ROMAN_AND_NUMBER = 2;\r\n\t    var MODE_8BIT_BYTE = 4;\r\n\t    var MODE_KANJI = 8;\r\n\t\tdo \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar mode = this.NextMode();\r\n\t\t\t\t\t\t//canvas.println(\"mode: \" + mode);\r\n\t\t\t\t\t\tif (mode == 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (output.length > 0)\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tthrow \"Empty data block\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//if (mode != 1 && mode != 2 && mode != 4 && mode != 8)\r\n\t\t\t\t\t\t//\tbreak;\r\n\t\t\t\t\t\t//}\r\n\t\t\t\t\t\tif (mode != MODE_NUMBER && mode != MODE_ROMAN_AND_NUMBER && mode != MODE_8BIT_BYTE && mode != MODE_KANJI)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t/*\t\t\t\t\tcanvas.println(\"Invalid mode: \" + mode);\r\n\t\t\t\t\t\t\tmode = guessMode(mode);\r\n\t\t\t\t\t\t\tcanvas.println(\"Guessed mode: \" + mode); */\r\n\t\t\t\t\t\t\tthrow \"Invalid mode: \" + mode + \" in (block:\" + this.blockPointer + \" bit:\" + this.bitPointer + \")\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdataLength = this.getDataLength(mode);\r\n\t\t\t\t\t\tif (dataLength < 1)\r\n\t\t\t\t\t\t\tthrow \"Invalid data length: \" + dataLength;\r\n\t\t\t\t\t\t//canvas.println(\"length: \" + dataLength);\r\n\t\t\t\t\t\tswitch (mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcase MODE_NUMBER: \r\n\t\t\t\t\t\t\t\t//canvas.println(\"Mode: Figure\");\r\n\t\t\t\t\t\t\t\tvar temp_str = this.getFigureString(dataLength);\r\n\t\t\t\t\t\t\t\tvar ta = new Array(temp_str.length);\r\n\t\t\t\t\t\t\t\tfor(var j=0;j<temp_str.length;j++)\r\n\t\t\t\t\t\t\t\t\tta[j]=temp_str.charCodeAt(j);\r\n\t\t\t\t\t\t\t\toutput.push(ta);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcase MODE_ROMAN_AND_NUMBER: \r\n\t\t\t\t\t\t\t\t//canvas.println(\"Mode: Roman&Figure\");\r\n\t\t\t\t\t\t\t\tvar temp_str = this.getRomanAndFigureString(dataLength);\r\n\t\t\t\t\t\t\t\tvar ta = new Array(temp_str.length);\r\n\t\t\t\t\t\t\t\tfor(var j=0;j<temp_str.length;j++)\r\n\t\t\t\t\t\t\t\t\tta[j]=temp_str.charCodeAt(j);\r\n\t\t\t\t\t\t\t\toutput.push(ta );\r\n\t\t\t\t\t\t\t\t//output.Write(SystemUtils.ToByteArray(temp_sbyteArray2), 0, temp_sbyteArray2.Length);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcase MODE_8BIT_BYTE: \r\n\t\t\t\t\t\t\t\t//canvas.println(\"Mode: 8bit Byte\");\r\n\t\t\t\t\t\t\t\t//sbyte[] temp_sbyteArray3;\r\n\t\t\t\t\t\t\t\tvar temp_sbyteArray3 = this.get8bitByteArray(dataLength);\r\n\t\t\t\t\t\t\t\toutput.push(temp_sbyteArray3);\r\n\t\t\t\t\t\t\t\t//output.Write(SystemUtils.ToByteArray(temp_sbyteArray3), 0, temp_sbyteArray3.Length);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcase MODE_KANJI: \r\n\t\t\t\t\t\t\t\t//canvas.println(\"Mode: Kanji\");\r\n\t\t\t\t\t\t\t\t//sbyte[] temp_sbyteArray4;\r\n\t\t\t\t\t\t\t\t//temp_sbyteArray4 = SystemUtils.ToSByteArray(SystemUtils.ToByteArray(getKanjiString(dataLength)));\r\n\t\t\t\t\t\t\t\t//output.Write(SystemUtils.ToByteArray(temp_sbyteArray4), 0, temp_sbyteArray4.Length);\r\n                                var temp_str = this.getKanjiString(dataLength);\r\n\t\t\t\t\t\t\t\toutput.push(temp_str);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//\t\t\t\r\n\t\t\t\t\t\t//canvas.println(\"DataLength: \" + dataLength);\r\n\t\t\t\t\t\t//Console.out.println(dataString);\r\n\t\t\t\t\t}\r\n\t\t\t\t\twhile (true);\r\n\t\treturn output;\r\n\t});\r\n}\r\nreturn qrcode;}));\n\n//# sourceMappingURL=qrcode.js.map","(function (root, factory) {\n  if (typeof define === 'function' && define.amd)\n    define(['qrcode'], factory);\n  else if (typeof exports === 'object')\n    module.exports = factory(require('../build/qrcode'));\n  else root.QCodeDecoder = factory(qrcode);\n}(this, function (qrcode) {\n\n'use strict';\n\n/**\n * Constructor for QCodeDecoder\n */\nfunction QCodeDecoder () {\n  if (!(this instanceof QCodeDecoder))\n    return new QCodeDecoder();\n\n  this.timerCapture = null;\n  this.canvasElem = null;\n  this.stream = null;\n  this.videoConstraints = {video: true, audio: false};\n}\n\n/**\n * Verifies if canvas element is supported.\n */\nQCodeDecoder.prototype.isCanvasSupported = function () {\n  var elem = document.createElement('canvas');\n\n  return !!(elem.getContext && elem.getContext('2d'));\n};\n\n\n/**\n * Normalizes and Verifies if the user has\n * getUserMedia enabled in the browser.\n */\nQCodeDecoder.prototype.hasGetUserMedia = function () {\n  navigator.getUserMedia = navigator.getUserMedia ||\n                           navigator.webkitGetUserMedia ||\n                           navigator.mozGetUserMedia ||\n                           navigator.msGetUserMedia;\n\n  return !!(navigator.getUserMedia);\n};\n\n/**\n * Prepares the canvas element (which will\n * receive the image from the camera and provide\n * what the algorithm needs for checking for a\n * QRCode and then decoding it.)\n *\n *\n * @param  {DOMElement} canvasElem the canvas\n *                                 element\n * @param  {number} width      The width that\n *                             the canvas element\n *                             should have\n * @param  {number} height     The height that\n *                             the canvas element\n *                             should have\n * @return {DOMElement}            the canvas\n * after the resize if width and height\n * provided.\n */\nQCodeDecoder.prototype._prepareCanvas = function (videoElem) {\n  if (!this.canvasElem) {\n    this.canvasElem = document.createElement('canvas');\n    this.canvasElem.style.width = videoElem.videoWidth + \"px\";\n    this.canvasElem.style.height = videoElem.videoHeight + \"px\";\n    this.canvasElem.width = videoElem.videoWidth;\n    this.canvasElem.height = videoElem.videoHeight;\n  }\n\n  qrcode.setCanvasElement(this.canvasElem);\n\n  return this;\n};\n\n/**\n * Based on the video dimensions and the canvas\n * that was previously generated captures the\n * video/image source and then paints into the\n * canvas so that the decoder is able to work as\n * it expects.\n * @param  {Function} cb\n * @return {Object}      this\n */\nQCodeDecoder.prototype._captureToCanvas = function (videoElem, cb, once) {\n  if (this.timerCapture)\n    clearTimeout(this.timerCapture);\n\n  if (videoElem.videoWidth && videoElem.videoHeight) {\n    if (!this.canvasElem)\n      this._prepareCanvas(videoElem);\n\n    var gCtx = this.canvasElem.getContext(\"2d\");\n    gCtx.clearRect(0, 0, videoElem.videoWidth,\n                         videoElem.videoHeight);\n    gCtx.drawImage(videoElem, 0, 0,\n                   videoElem.videoWidth,\n                   videoElem.videoHeight);\n    try {\n      cb(null, qrcode.decode());\n\n      if (once) return;\n    } catch (err){\n      if (err !== \"Couldn't find enough finder patterns\")\n        cb(new Error(err));\n    }\n  }\n\n  this.timerCapture = setTimeout(function () {\n    this._captureToCanvas.call(this, videoElem, cb, once);\n  }.bind(this), 500);\n};\n\n/**\n * Prepares the video element for receiving\n * camera's input. Releases a stream if there\n * was any (resets).\n *\n * @param  {DOMElement} videoElem <video> dom\n *                                element\n * @param  {Function} errcb     callback\n *                              function to be\n *                              called in case of\n *                              error\n */\nQCodeDecoder.prototype.decodeFromCamera = function (videoElem, cb, once) {\n  var scope = (this.stop(), this);\n\n  if (!this.hasGetUserMedia())\n    cb(new Error('Couldn\\'t get video from camera'));\n\n  navigator.getUserMedia(this.videoConstraints, function (stream) {\n    videoElem.src = window.URL.createObjectURL(stream);\n    scope.videoElem = videoElem;\n    scope.stream = stream;\n    scope.videoDimensions = false;\n\n    setTimeout(function () {\n      scope._captureToCanvas.call(scope, videoElem, cb, once);\n    }, 500);\n  }, cb);\n\n  return this;\n};\n\nQCodeDecoder.prototype.decodeFromVideo = function (videoElem, cb, once) {\n  setTimeout(function () {\n    this._captureToCanvas.call(this, videoElem, cb, once);\n  }.bind(this), 500);\n\n  return this;\n};\n\n/**\n * Decodes an image from its src.\n * @param  {DOMNode}   imageElemvideoElem\n * @param  {Function} cb        callback\n * @return {Object}             this\n */\nQCodeDecoder.prototype.decodeFromImage = function (img, cb) {\n  if (+img.nodeType > 0 && !img.src)\n    throw new Error('The ImageElement must contain a src');\n\n  img = img.src ? img.src : img;\n\n  return (qrcode.decode(img, cb), this);\n};\n\n\n\n/**\n * Releases a video stream that was being\n * captured by prepareToVideo\n */\nQCodeDecoder.prototype.stop = function() {\n  if (this.stream) {\n    this.stream.stop();\n    this.stream = undefined;\n  }\n\n  if (this.timerCapture) {\n    clearTimeout(this.timerCapture);\n    this.timerCapture = undefined;\n  }\n\n  return this;\n};\n\n/**\n * Sets the sourceId for the camera to use.\n *\n * The sourceId can be found using the\n * getVideoSources function on a browser that\n * supports it (currently only Chrome).\n *\n * @param {String} sourceId     The id of the\n * video source you want to use (or false to use\n * the current default)\n */\nQCodeDecoder.prototype.setSourceId = function (sourceId) {\n  if (sourceId)\n    this.videoConstraints.video = { optional: [{ sourceId: sourceId }]};\n  else\n    this.videoConstraints.video = true;\n\n  return this;\n};\n\n\n/**\n * Gets a list of all available video sources on\n * the device\n */\nQCodeDecoder.prototype.getVideoSources = function (cb) {\n  var sources = [];\n\n  if (MediaStreamTrack && MediaStreamTrack.getSources) {\n    MediaStreamTrack.getSources(function (sourceInfos) {\n      sourceInfos.forEach(function(sourceInfo) {\n        if (sourceInfo.kind === 'video')\n          sources.push(sourceInfo);\n      });\n      cb(null, sources);\n    });\n  } else {\n    cb(new Error('Current browser doest not support MediaStreamTrack.getSources'));\n  }\n\n  return this;\n};\n\n\nreturn QCodeDecoder; }));\n"],"sourceRoot":"/source/"}